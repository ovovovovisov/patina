
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+8 (git sha1 fb4cbfa73, ccache clang 14.0.0-1ubuntu1.1 -Os -flto -flto)


-- Executing script file `top.ys' --

1. Executing RTLIL frontend.
Input filename: top.il

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /share/ice40/cells_sim.v
Parsing Verilog input from `/share/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \top.pin_clk16_0
Used module:     \top.pin_uart_0__tx
Used module:     \top.pin_uart_0__rx
Used module:     \top.cd_sync
Used module:     \top.csr_dec
Used module:     \top.wb_csr
Used module:     \top.wb_dec
Used module:     \top.wb_arb
Used module:     \top.serial
Used module:         \top.serial.phy
Used module:             \top.serial.phy.tx
Used module:             \top.serial.phy.rx
Used module:         \top.serial.tx_fifo
Used module:         \top.serial.rx_fifo
Used module:         \top.serial.bridge
Used module:             \top.serial.bridge.tx__data
Used module:                 \top.serial.bridge.tx__data.data
Used module:             \top.serial.bridge.tx__info
Used module:                 \top.serial.bridge.tx__info.rdy
Used module:             \top.serial.bridge.rx__data
Used module:                 \top.serial.bridge.rx__data.data
Used module:             \top.serial.bridge.rx__info
Used module:                 \top.serial.bridge.rx__info.err__parity
Used module:                 \top.serial.bridge.rx__info.err__frame
Used module:                 \top.serial.bridge.rx__info.err__overflow
Used module:                 \top.serial.bridge.rx__info.rdy
Used module:             \top.serial.bridge.ctrl
Used module:                 \top.serial.bridge.ctrl.divisor
Used module:             \top.serial.bridge.mux
Used module:     \top.rom
Used module:     \top.cpu
Used module:         \top.cpu.csrf
Used module:         \top.cpu.gprf
Used module:             \top.cpu.gprf.mem
Used module:         \top.cpu.loadstore
Used module:         \top.cpu.fetch
Used module:             \top.cpu.fetch.ibus_arbiter
Used module:                 \top.cpu.fetch.ibus_arbiter.bus_pe
Used module:             \top.cpu.fetch.icache
Used module:                 \top.cpu.fetch.icache.dat_mem_0
Used module:                 \top.cpu.fetch.icache.tag_mem_0
Used module:                 \top.cpu.fetch.icache.way_hit
Used module:         \top.cpu.shifter
Used module:         \top.cpu.predict
Used module:         \top.cpu.logic
Used module:         \top.cpu.exception
Used module:             \top.cpu.exception.interrupt_pe
Used module:             \top.cpu.exception.trap_pe
Used module:         \top.cpu.decoder
Used module:         \top.cpu.compare
Used module:         \top.cpu.adder
Used module:         \top.cpu.data_sel
Used module:         \top.cpu.pc_sel
Used module:         \top.cpu.w
Used module:         \top.cpu.m
Used module:         \top.cpu.x
Used module:         \top.cpu.d
Used module:         \top.cpu.f
Used module:         \top.cpu.a

2.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \top.pin_clk16_0
Used module:     \top.pin_uart_0__tx
Used module:     \top.pin_uart_0__rx
Used module:     \top.cd_sync
Used module:     \top.csr_dec
Used module:     \top.wb_csr
Used module:     \top.wb_dec
Used module:     \top.wb_arb
Used module:     \top.serial
Used module:         \top.serial.phy
Used module:             \top.serial.phy.tx
Used module:             \top.serial.phy.rx
Used module:         \top.serial.tx_fifo
Used module:         \top.serial.rx_fifo
Used module:         \top.serial.bridge
Used module:             \top.serial.bridge.tx__data
Used module:                 \top.serial.bridge.tx__data.data
Used module:             \top.serial.bridge.tx__info
Used module:                 \top.serial.bridge.tx__info.rdy
Used module:             \top.serial.bridge.rx__data
Used module:                 \top.serial.bridge.rx__data.data
Used module:             \top.serial.bridge.rx__info
Used module:                 \top.serial.bridge.rx__info.err__parity
Used module:                 \top.serial.bridge.rx__info.err__frame
Used module:                 \top.serial.bridge.rx__info.err__overflow
Used module:                 \top.serial.bridge.rx__info.rdy
Used module:             \top.serial.bridge.ctrl
Used module:                 \top.serial.bridge.ctrl.divisor
Used module:             \top.serial.bridge.mux
Used module:     \top.rom
Used module:     \top.cpu
Used module:         \top.cpu.csrf
Used module:         \top.cpu.gprf
Used module:             \top.cpu.gprf.mem
Used module:         \top.cpu.loadstore
Used module:         \top.cpu.fetch
Used module:             \top.cpu.fetch.ibus_arbiter
Used module:                 \top.cpu.fetch.ibus_arbiter.bus_pe
Used module:             \top.cpu.fetch.icache
Used module:                 \top.cpu.fetch.icache.dat_mem_0
Used module:                 \top.cpu.fetch.icache.tag_mem_0
Used module:                 \top.cpu.fetch.icache.way_hit
Used module:         \top.cpu.shifter
Used module:         \top.cpu.predict
Used module:         \top.cpu.logic
Used module:         \top.cpu.exception
Used module:             \top.cpu.exception.interrupt_pe
Used module:             \top.cpu.exception.trap_pe
Used module:         \top.cpu.decoder
Used module:         \top.cpu.compare
Used module:         \top.cpu.adder
Used module:         \top.cpu.data_sel
Used module:         \top.cpu.pc_sel
Used module:         \top.cpu.w
Used module:         \top.cpu.m
Used module:         \top.cpu.x
Used module:         \top.cpu.d
Used module:         \top.cpu.f
Used module:         \top.cpu.a
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/share/ice40/cells_sim.v:1414$241 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/share/ice40/cells_sim.v:1353$234 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/share/ice40/cells_sim.v:1273$230 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/share/ice40/cells_sim.v:1212$223 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/share/ice40/cells_sim.v:1138$220 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/share/ice40/cells_sim.v:1088$217 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/share/ice40/cells_sim.v:1017$214 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/share/ice40/cells_sim.v:967$211 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/share/ice40/cells_sim.v:803$203 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/share/ice40/cells_sim.v:742$196 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/share/ice40/cells_sim.v:662$192 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/share/ice40/cells_sim.v:601$185 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/share/ice40/cells_sim.v:527$182 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/share/ice40/cells_sim.v:477$179 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/share/ice40/cells_sim.v:406$176 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/share/ice40/cells_sim.v:356$173 in module SB_DFFSR.
Marked 1 switch rules as full_case in process $group_2 in module top.cd_sync.
Marked 1 switch rules as full_case in process $group_6 in module top.wb_csr.
Marked 1 switch rules as full_case in process $group_5 in module top.wb_csr.
Marked 1 switch rules as full_case in process $group_15 in module top.wb_arb.
Marked 1 switch rules as full_case in process $group_14 in module top.wb_arb.
Marked 1 switch rules as full_case in process $group_11 in module top.wb_arb.
Marked 1 switch rules as full_case in process $group_10 in module top.wb_arb.
Marked 1 switch rules as full_case in process $group_9 in module top.wb_arb.
Marked 1 switch rules as full_case in process $group_8 in module top.wb_arb.
Marked 1 switch rules as full_case in process $group_7 in module top.wb_arb.
Marked 1 switch rules as full_case in process $group_6 in module top.wb_arb.
Marked 1 switch rules as full_case in process $group_5 in module top.wb_arb.
Marked 1 switch rules as full_case in process $group_4 in module top.wb_arb.
Marked 1 switch rules as full_case in process $group_1 in module top.wb_arb.
Marked 2 switch rules as full_case in process $group_4 in module top.serial.phy.tx.
Marked 2 switch rules as full_case in process $group_3 in module top.serial.phy.tx.
Marked 2 switch rules as full_case in process $group_2 in module top.serial.phy.tx.
Marked 2 switch rules as full_case in process $group_5 in module top.serial.phy.tx.
Marked 1 switch rules as full_case in process $group_5 in module top.serial.phy.rx.
Marked 1 switch rules as full_case in process $group_3 in module top.serial.phy.rx.
Marked 1 switch rules as full_case in process $group_2 in module top.serial.phy.rx.
Marked 1 switch rules as full_case in process $group_1 in module top.serial.phy.rx.
Marked 1 switch rules as full_case in process $group_0 in module top.serial.phy.rx.
Marked 2 switch rules as full_case in process $group_6 in module top.rom.
Marked 2 switch rules as full_case in process $group_5 in module top.rom.
Marked 1 switch rules as full_case in process $group_4 in module top.rom.
Marked 2 switch rules as full_case in process $group_1 in module top.rom.
Marked 1 switch rules as full_case in process $group_269 in module top.cpu.
Marked 1 switch rules as full_case in process $group_266 in module top.cpu.
Marked 1 switch rules as full_case in process $group_221 in module top.cpu.
Marked 1 switch rules as full_case in process $group_220 in module top.cpu.
Marked 1 switch rules as full_case in process $group_213 in module top.cpu.
Marked 1 switch rules as full_case in process $group_212 in module top.cpu.
Marked 1 switch rules as full_case in process $group_211 in module top.cpu.
Marked 1 switch rules as full_case in process $group_210 in module top.cpu.
Marked 1 switch rules as full_case in process $group_147 in module top.cpu.
Marked 1 switch rules as full_case in process $group_132 in module top.cpu.
Marked 1 switch rules as full_case in process $group_131 in module top.cpu.
Marked 1 switch rules as full_case in process $group_11 in module top.cpu.gprf.mem.
Marked 1 switch rules as full_case in process $group_10 in module top.cpu.gprf.mem.
Marked 1 switch rules as full_case in process $group_11 in module top.cpu.loadstore.
Marked 1 switch rules as full_case in process $group_44 in module top.cpu.fetch.
Marked 1 switch rules as full_case in process $group_43 in module top.cpu.fetch.
Marked 1 switch rules as full_case in process $group_13 in module top.cpu.fetch.ibus_arbiter.
Marked 1 switch rules as full_case in process $group_11 in module top.cpu.fetch.ibus_arbiter.
Marked 1 switch rules as full_case in process $group_10 in module top.cpu.fetch.ibus_arbiter.
Marked 1 switch rules as full_case in process $group_9 in module top.cpu.fetch.ibus_arbiter.
Marked 1 switch rules as full_case in process $group_8 in module top.cpu.fetch.ibus_arbiter.
Marked 1 switch rules as full_case in process $group_7 in module top.cpu.fetch.ibus_arbiter.
Marked 1 switch rules as full_case in process $group_6 in module top.cpu.fetch.ibus_arbiter.
Marked 1 switch rules as full_case in process $group_5 in module top.cpu.fetch.ibus_arbiter.
Marked 1 switch rules as full_case in process $group_4 in module top.cpu.fetch.ibus_arbiter.
Marked 1 switch rules as full_case in process $group_3 in module top.cpu.fetch.ibus_arbiter.
Marked 1 switch rules as full_case in process $group_23 in module top.cpu.fetch.icache.
Marked 1 switch rules as full_case in process $group_21 in module top.cpu.fetch.icache.
Marked 1 switch rules as full_case in process $group_20 in module top.cpu.fetch.icache.
Marked 1 switch rules as full_case in process $group_19 in module top.cpu.fetch.icache.
Marked 1 switch rules as full_case in process $group_13 in module top.cpu.fetch.icache.
Marked 1 switch rules as full_case in process $group_10 in module top.cpu.fetch.icache.
Marked 1 switch rules as full_case in process $group_7 in module top.cpu.fetch.icache.
Marked 1 switch rules as full_case in process $group_5 in module top.cpu.fetch.icache.
Marked 1 switch rules as full_case in process $group_3 in module top.cpu.fetch.icache.
Marked 4 switch rules as full_case in process $group_8 in module top.cpu.fetch.icache.dat_mem_0.
Marked 1 switch rules as full_case in process $group_8 in module top.cpu.fetch.icache.tag_mem_0.
Marked 1 switch rules as full_case in process $group_1 in module top.cpu.fetch.icache.way_hit.
Marked 1 switch rules as full_case in process $group_2 in module top.cpu.predict.
Marked 1 switch rules as full_case in process $group_59 in module top.cpu.exception.
Marked 3 switch rules as full_case in process $group_45 in module top.cpu.exception.
Marked 1 switch rules as full_case in process $group_44 in module top.cpu.exception.
Marked 1 switch rules as full_case in process $group_42 in module top.cpu.exception.
Marked 1 switch rules as full_case in process $group_9 in module top.cpu.adder.
Marked 1 switch rules as full_case in process $group_8 in module top.cpu.adder.
Marked 1 switch rules as full_case in process $group_7 in module top.cpu.adder.
Marked 1 switch rules as full_case in process $group_2 in module top.cpu.pc_sel.
Marked 1 switch rules as full_case in process $group_1 in module top.cpu.pc_sel.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 575 redundant assignments.
Promoted 540 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/share/ice40/cells_sim.v:0$244'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/share/ice40/cells_sim.v:0$240'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/share/ice40/cells_sim.v:0$233'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/share/ice40/cells_sim.v:0$229'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/share/ice40/cells_sim.v:0$222'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/share/ice40/cells_sim.v:0$219'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/share/ice40/cells_sim.v:0$216'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/share/ice40/cells_sim.v:0$213'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/share/ice40/cells_sim.v:0$210'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/share/ice40/cells_sim.v:0$208'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/share/ice40/cells_sim.v:0$206'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/share/ice40/cells_sim.v:0$202'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/share/ice40/cells_sim.v:0$195'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/share/ice40/cells_sim.v:0$191'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/share/ice40/cells_sim.v:0$184'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/share/ice40/cells_sim.v:0$181'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/share/ice40/cells_sim.v:0$178'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/share/ice40/cells_sim.v:0$175'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/share/ice40/cells_sim.v:0$172'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/share/ice40/cells_sim.v:0$170'.
  Set init value: \Q = 1'0

2.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/share/ice40/cells_sim.v:1414$241'.
Found async reset \R in `\SB_DFFNER.$proc$/share/ice40/cells_sim.v:1273$230'.
Found async reset \S in `\SB_DFFNS.$proc$/share/ice40/cells_sim.v:1138$220'.
Found async reset \R in `\SB_DFFNR.$proc$/share/ice40/cells_sim.v:1017$214'.
Found async reset \S in `\SB_DFFES.$proc$/share/ice40/cells_sim.v:803$203'.
Found async reset \R in `\SB_DFFER.$proc$/share/ice40/cells_sim.v:662$192'.
Found async reset \S in `\SB_DFFS.$proc$/share/ice40/cells_sim.v:527$182'.
Found async reset \R in `\SB_DFFR.$proc$/share/ice40/cells_sim.v:406$176'.

2.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~572 debug messages>

2.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/share/ice40/cells_sim.v:0$244'.
Creating decoders for process `\SB_DFFNES.$proc$/share/ice40/cells_sim.v:1414$241'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/share/ice40/cells_sim.v:0$240'.
Creating decoders for process `\SB_DFFNESS.$proc$/share/ice40/cells_sim.v:1353$234'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/share/ice40/cells_sim.v:0$233'.
Creating decoders for process `\SB_DFFNER.$proc$/share/ice40/cells_sim.v:1273$230'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/share/ice40/cells_sim.v:0$229'.
Creating decoders for process `\SB_DFFNESR.$proc$/share/ice40/cells_sim.v:1212$223'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/share/ice40/cells_sim.v:0$222'.
Creating decoders for process `\SB_DFFNS.$proc$/share/ice40/cells_sim.v:1138$220'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/share/ice40/cells_sim.v:0$219'.
Creating decoders for process `\SB_DFFNSS.$proc$/share/ice40/cells_sim.v:1088$217'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/share/ice40/cells_sim.v:0$216'.
Creating decoders for process `\SB_DFFNR.$proc$/share/ice40/cells_sim.v:1017$214'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/share/ice40/cells_sim.v:0$213'.
Creating decoders for process `\SB_DFFNSR.$proc$/share/ice40/cells_sim.v:967$211'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/share/ice40/cells_sim.v:0$210'.
Creating decoders for process `\SB_DFFNE.$proc$/share/ice40/cells_sim.v:922$209'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/share/ice40/cells_sim.v:0$208'.
Creating decoders for process `\SB_DFFN.$proc$/share/ice40/cells_sim.v:882$207'.
Creating decoders for process `\SB_DFFES.$proc$/share/ice40/cells_sim.v:0$206'.
Creating decoders for process `\SB_DFFES.$proc$/share/ice40/cells_sim.v:803$203'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/share/ice40/cells_sim.v:0$202'.
Creating decoders for process `\SB_DFFESS.$proc$/share/ice40/cells_sim.v:742$196'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/share/ice40/cells_sim.v:0$195'.
Creating decoders for process `\SB_DFFER.$proc$/share/ice40/cells_sim.v:662$192'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/share/ice40/cells_sim.v:0$191'.
Creating decoders for process `\SB_DFFESR.$proc$/share/ice40/cells_sim.v:601$185'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/share/ice40/cells_sim.v:0$184'.
Creating decoders for process `\SB_DFFS.$proc$/share/ice40/cells_sim.v:527$182'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/share/ice40/cells_sim.v:0$181'.
Creating decoders for process `\SB_DFFSS.$proc$/share/ice40/cells_sim.v:477$179'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/share/ice40/cells_sim.v:0$178'.
Creating decoders for process `\SB_DFFR.$proc$/share/ice40/cells_sim.v:406$176'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/share/ice40/cells_sim.v:0$175'.
Creating decoders for process `\SB_DFFSR.$proc$/share/ice40/cells_sim.v:356$173'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/share/ice40/cells_sim.v:0$172'.
Creating decoders for process `\SB_DFFE.$proc$/share/ice40/cells_sim.v:311$171'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/share/ice40/cells_sim.v:0$170'.
Creating decoders for process `\SB_DFF.$proc$/share/ice40/cells_sim.v:271$169'.
Creating decoders for process `\top.$group_31'.
Creating decoders for process `\top.$group_30'.
Creating decoders for process `\top.$group_29'.
Creating decoders for process `\top.$group_28'.
Creating decoders for process `\top.$group_27'.
Creating decoders for process `\top.$group_26'.
Creating decoders for process `\top.$group_25'.
Creating decoders for process `\top.$group_24'.
Creating decoders for process `\top.$group_23'.
Creating decoders for process `\top.$group_22'.
Creating decoders for process `\top.$group_21'.
Creating decoders for process `\top.$group_20'.
Creating decoders for process `\top.$group_19'.
Creating decoders for process `\top.$group_18'.
Creating decoders for process `\top.$group_17'.
Creating decoders for process `\top.$group_16'.
Creating decoders for process `\top.$group_15'.
Creating decoders for process `\top.$group_14'.
Creating decoders for process `\top.$group_13'.
Creating decoders for process `\top.$group_12'.
Creating decoders for process `\top.$group_11'.
Creating decoders for process `\top.$group_10'.
Creating decoders for process `\top.$group_9'.
Creating decoders for process `\top.$group_8'.
Creating decoders for process `\top.$group_7'.
Creating decoders for process `\top.$group_6'.
Creating decoders for process `\top.$group_5'.
Creating decoders for process `\top.$group_4'.
Creating decoders for process `\top.$group_3'.
Creating decoders for process `\top.$group_2'.
Creating decoders for process `\top.$group_1'.
Creating decoders for process `\top.$group_0'.
Creating decoders for process `\top.cd_sync.$group_4'.
Creating decoders for process `\top.cd_sync.$group_3'.
Creating decoders for process `\top.cd_sync.$group_2'.
     1/1: \timer$next
Creating decoders for process `\top.cd_sync.$group_1'.
     1/1: \ready$next
Creating decoders for process `\top.cd_sync.$group_0'.
Creating decoders for process `\top.csr_dec.$group_4'.
Creating decoders for process `\top.csr_dec.$group_3'.
     1/1: \csr_bus__w_stb
Creating decoders for process `\top.csr_dec.$group_2'.
     1/1: \csr_bus__r_stb
Creating decoders for process `\top.csr_dec.$group_1'.
Creating decoders for process `\top.csr_dec.$group_0'.
Creating decoders for process `\top.wb_csr.$group_6'.
     1/1: \wb_bus__ack$next
Creating decoders for process `\top.wb_csr.$group_5'.
     1/4: \wb_bus__dat_r$next [31:24]
     2/4: \wb_bus__dat_r$next [15:8]
     3/4: \wb_bus__dat_r$next [7:0]
     4/4: \wb_bus__dat_r$next [23:16]
Creating decoders for process `\top.wb_csr.$group_4'.
     1/1: \cycle$next
Creating decoders for process `\top.wb_csr.$group_3'.
     1/1: \bus__w_stb
Creating decoders for process `\top.wb_csr.$group_2'.
     1/1: \bus__w_data
Creating decoders for process `\top.wb_csr.$group_1'.
     1/1: \bus__r_stb
Creating decoders for process `\top.wb_csr.$group_0'.
Creating decoders for process `\top.wb_dec.$group_23'.
Creating decoders for process `\top.wb_dec.$group_22'.
     1/1: \wb_bus__cyc
Creating decoders for process `\top.wb_dec.$group_21'.
     1/1: \bus__cyc$5
Creating decoders for process `\top.wb_dec.$group_20'.
     1/1: \bus__dat_r
Creating decoders for process `\top.wb_dec.$group_19'.
     1/1: \bus__cyc$27
Creating decoders for process `\top.wb_dec.$group_18'.
Creating decoders for process `\top.wb_dec.$group_17'.
Creating decoders for process `\top.wb_dec.$group_16'.
Creating decoders for process `\top.wb_dec.$group_15'.
Creating decoders for process `\top.wb_dec.$group_14'.
Creating decoders for process `\top.wb_dec.$group_13'.
Creating decoders for process `\top.wb_dec.$group_12'.
Creating decoders for process `\top.wb_dec.$group_11'.
Creating decoders for process `\top.wb_dec.$group_10'.
Creating decoders for process `\top.wb_dec.$group_9'.
Creating decoders for process `\top.wb_dec.$group_8'.
Creating decoders for process `\top.wb_dec.$group_7'.
Creating decoders for process `\top.wb_dec.$group_6'.
Creating decoders for process `\top.wb_dec.$group_5'.
Creating decoders for process `\top.wb_dec.$group_4'.
Creating decoders for process `\top.wb_dec.$group_3'.
Creating decoders for process `\top.wb_dec.$group_2'.
Creating decoders for process `\top.wb_dec.$group_1'.
Creating decoders for process `\top.wb_dec.$group_0'.
Creating decoders for process `\top.wb_arb.$group_15'.
     1/1: \_cpu_dbus__err
Creating decoders for process `\top.wb_arb.$group_14'.
     1/1: \_cpu_dbus__ack
Creating decoders for process `\top.wb_arb.$group_13'.
     1/1: \_cpu_ibus__err
Creating decoders for process `\top.wb_arb.$group_12'.
     1/1: \_cpu_ibus__ack
Creating decoders for process `\top.wb_arb.$group_11'.
     1/1: \bus__bte
Creating decoders for process `\top.wb_arb.$group_10'.
     1/1: \bus__cti
Creating decoders for process `\top.wb_arb.$group_9'.
     1/1: \bus__cyc
Creating decoders for process `\top.wb_arb.$group_8'.
     1/1: \bus__stb
Creating decoders for process `\top.wb_arb.$group_7'.
     1/1: \bus__we
Creating decoders for process `\top.wb_arb.$group_6'.
     1/1: \bus__sel
Creating decoders for process `\top.wb_arb.$group_5'.
     1/1: \bus__dat_w
Creating decoders for process `\top.wb_arb.$group_4'.
     1/1: \bus__adr
Creating decoders for process `\top.wb_arb.$group_3'.
Creating decoders for process `\top.wb_arb.$group_2'.
Creating decoders for process `\top.wb_arb.$group_1'.
     1/1: \grant$next
Creating decoders for process `\top.wb_arb.$group_0'.
Creating decoders for process `\top.serial.$group_17'.
Creating decoders for process `\top.serial.$group_16'.
Creating decoders for process `\top.serial.$group_15'.
Creating decoders for process `\top.serial.$group_14'.
Creating decoders for process `\top.serial.$group_13'.
Creating decoders for process `\top.serial.$group_12'.
Creating decoders for process `\top.serial.$group_11'.
Creating decoders for process `\top.serial.$group_10'.
Creating decoders for process `\top.serial.$group_9'.
Creating decoders for process `\top.serial.$group_8'.
Creating decoders for process `\top.serial.$group_7'.
Creating decoders for process `\top.serial.$group_6'.
Creating decoders for process `\top.serial.$group_5'.
Creating decoders for process `\top.serial.$group_4'.
Creating decoders for process `\top.serial.$group_3'.
Creating decoders for process `\top.serial.$group_2'.
Creating decoders for process `\top.serial.$group_1'.
Creating decoders for process `\top.serial.$group_0'.
Creating decoders for process `\top.serial.phy.$group_12'.
Creating decoders for process `\top.serial.phy.$group_11'.
Creating decoders for process `\top.serial.phy.$group_10'.
Creating decoders for process `\top.serial.phy.$group_9'.
Creating decoders for process `\top.serial.phy.$group_8'.
Creating decoders for process `\top.serial.phy.$group_7'.
Creating decoders for process `\top.serial.phy.$group_6'.
Creating decoders for process `\top.serial.phy.$group_5'.
Creating decoders for process `\top.serial.phy.$group_4'.
Creating decoders for process `\top.serial.phy.$group_3'.
Creating decoders for process `\top.serial.phy.$group_2'.
Creating decoders for process `\top.serial.phy.$group_1'.
Creating decoders for process `\top.serial.phy.$group_0'.
Creating decoders for process `\top.serial.phy.tx.$group_4'.
     1/1: \fsm_state$next
Creating decoders for process `\top.serial.phy.tx.$group_3'.
     1/1: \timer$next
Creating decoders for process `\top.serial.phy.tx.$group_2'.
     1/1: \bitno$next
Creating decoders for process `\top.serial.phy.tx.$group_5'.
     1/4: \shreg$next [9]
     2/4: \shreg$next [8:1]
     3/4: \o$next
     4/4: \shreg$next [0]
Creating decoders for process `\top.serial.phy.tx.$group_0'.
     1/1: \rdy
Creating decoders for process `\top.serial.phy.rx.$group_6'.
     1/1: \rdy$next
Creating decoders for process `\top.serial.phy.rx.$group_5'.
     1/3: \err$next [2]
     2/3: \err$next [0]
     3/3: \err$next [1]
Creating decoders for process `\top.serial.phy.rx.$group_4'.
     1/1: \data$next
Creating decoders for process `\top.serial.phy.rx.$group_3'.
     1/1: \shreg$next
Creating decoders for process `\top.serial.phy.rx.$group_2'.
     1/1: \fsm_state$next
Creating decoders for process `\top.serial.phy.rx.$group_1'.
     1/1: \timer$next
Creating decoders for process `\top.serial.phy.rx.$group_0'.
     1/1: \bitno$next
Creating decoders for process `\top.serial.tx_fifo.$group_14'.
Creating decoders for process `\top.serial.tx_fifo.$group_13'.
     1/1: \r_rdy$next
Creating decoders for process `\top.serial.tx_fifo.$group_12'.
     1/1: \inner_level$next
Creating decoders for process `\top.serial.tx_fifo.$group_11'.
     1/1: \consume$next
Creating decoders for process `\top.serial.tx_fifo.$group_10'.
Creating decoders for process `\top.serial.tx_fifo.$group_9'.
Creating decoders for process `\top.serial.tx_fifo.$group_8'.
Creating decoders for process `\top.serial.tx_fifo.$group_7'.
     1/1: \produce$next
Creating decoders for process `\top.serial.tx_fifo.$group_6'.
Creating decoders for process `\top.serial.tx_fifo.$group_5'.
Creating decoders for process `\top.serial.tx_fifo.$group_4'.
Creating decoders for process `\top.serial.tx_fifo.$group_3'.
Creating decoders for process `\top.serial.tx_fifo.$group_2'.
Creating decoders for process `\top.serial.tx_fifo.$group_1'.
Creating decoders for process `\top.serial.tx_fifo.$group_0'.
Creating decoders for process `\top.serial.rx_fifo.$group_14'.
Creating decoders for process `\top.serial.rx_fifo.$group_13'.
     1/1: \r_rdy$next
Creating decoders for process `\top.serial.rx_fifo.$group_12'.
     1/1: \inner_level$next
Creating decoders for process `\top.serial.rx_fifo.$group_11'.
     1/1: \consume$next
Creating decoders for process `\top.serial.rx_fifo.$group_10'.
Creating decoders for process `\top.serial.rx_fifo.$group_9'.
Creating decoders for process `\top.serial.rx_fifo.$group_8'.
Creating decoders for process `\top.serial.rx_fifo.$group_7'.
     1/1: \produce$next
Creating decoders for process `\top.serial.rx_fifo.$group_6'.
Creating decoders for process `\top.serial.rx_fifo.$group_5'.
Creating decoders for process `\top.serial.rx_fifo.$group_4'.
Creating decoders for process `\top.serial.rx_fifo.$group_3'.
Creating decoders for process `\top.serial.rx_fifo.$group_2'.
Creating decoders for process `\top.serial.rx_fifo.$group_1'.
Creating decoders for process `\top.serial.rx_fifo.$group_0'.
Creating decoders for process `\top.serial.bridge.$group_4'.
Creating decoders for process `\top.serial.bridge.$group_3'.
Creating decoders for process `\top.serial.bridge.$group_2'.
Creating decoders for process `\top.serial.bridge.$group_1'.
Creating decoders for process `\top.serial.bridge.$group_0'.
Creating decoders for process `\top.serial.bridge.tx__data.$group_1'.
Creating decoders for process `\top.serial.bridge.tx__data.$group_0'.
Creating decoders for process `\top.serial.bridge.tx__data.data.$group_0'.
Creating decoders for process `\top.serial.bridge.tx__info.$group_1'.
Creating decoders for process `\top.serial.bridge.tx__info.$group_0'.
Creating decoders for process `\top.serial.bridge.tx__info.rdy.$group_0'.
Creating decoders for process `\top.serial.bridge.rx__data.$group_1'.
Creating decoders for process `\top.serial.bridge.rx__data.$group_0'.
Creating decoders for process `\top.serial.bridge.rx__data.data.$group_0'.
Creating decoders for process `\top.serial.bridge.rx__info.$group_4'.
Creating decoders for process `\top.serial.bridge.rx__info.$group_3'.
Creating decoders for process `\top.serial.bridge.rx__info.$group_2'.
Creating decoders for process `\top.serial.bridge.rx__info.$group_1'.
Creating decoders for process `\top.serial.bridge.rx__info.$group_0'.
Creating decoders for process `\top.serial.bridge.rx__info.err__parity.$group_0'.
Creating decoders for process `\top.serial.bridge.rx__info.err__frame.$group_0'.
Creating decoders for process `\top.serial.bridge.rx__info.err__overflow.$group_0'.
Creating decoders for process `\top.serial.bridge.rx__info.rdy.$group_0'.
Creating decoders for process `\top.serial.bridge.ctrl.$group_3'.
Creating decoders for process `\top.serial.bridge.ctrl.$group_2'.
Creating decoders for process `\top.serial.bridge.ctrl.$group_1'.
Creating decoders for process `\top.serial.bridge.ctrl.$group_0'.
Creating decoders for process `\top.serial.bridge.ctrl.divisor.$group_2'.
Creating decoders for process `\top.serial.bridge.ctrl.divisor.$group_1'.
Creating decoders for process `\top.serial.bridge.ctrl.divisor.$group_0'.
     1/1: \_storage$next
Creating decoders for process `\top.serial.bridge.mux.$group_13'.
     1/1: \w_shadow__0__data$next
Creating decoders for process `\top.serial.bridge.mux.$group_12'.
     1/1: \w_shadow__0__w_en
Creating decoders for process `\top.serial.bridge.mux.$group_11'.
Creating decoders for process `\top.serial.bridge.mux.$group_10'.
     1/1: \element__w_stb$next
Creating decoders for process `\top.serial.bridge.mux.$group_9'.
Creating decoders for process `\top.serial.bridge.mux.$group_8'.
     1/1: \element__w_stb$7$next
Creating decoders for process `\top.serial.bridge.mux.$group_7'.
Creating decoders for process `\top.serial.bridge.mux.$group_6'.
     1/1: \r_shadow__0__data$next
Creating decoders for process `\top.serial.bridge.mux.$group_5'.
Creating decoders for process `\top.serial.bridge.mux.$group_4'.
     1/1: \element__r_stb
Creating decoders for process `\top.serial.bridge.mux.$group_3'.
     1/1: \element__r_stb$3
Creating decoders for process `\top.serial.bridge.mux.$group_2'.
     1/1: \element__r_stb$2
Creating decoders for process `\top.serial.bridge.mux.$group_1'.
     1/1: \element__r_stb$1
Creating decoders for process `\top.serial.bridge.mux.$group_0'.
     1/1: \r_shadow__0__r_en$next
Creating decoders for process `\top.rom.$group_6'.
     1/1: \bus__ack$next
Creating decoders for process `\top.rom.$group_5'.
     1/1: \fsm_state$next
Creating decoders for process `\top.rom.$group_4'.
     1/1: \addr_curr$next
Creating decoders for process `\top.rom.$group_3'.
Creating decoders for process `\top.rom.$group_2'.
Creating decoders for process `\top.rom.$group_1'.
     1/1: \addr_next
Creating decoders for process `\top.rom.$group_0'.
Creating decoders for process `\top.cpu.$group_304'.
     1/1: \m_payload__exception$next
Creating decoders for process `\top.cpu.$group_303'.
     1/1: \payload__result$128$next
Creating decoders for process `\top.cpu.$group_302'.
     1/1: \payload__rd_we$124$next
Creating decoders for process `\top.cpu.$group_301'.
     1/1: \payload__load_data$131$next
Creating decoders for process `\top.cpu.$group_300'.
     1/1: \payload__funct3$126$next
Creating decoders for process `\top.cpu.$group_299'.
     1/1: \payload__load$130$next
Creating decoders for process `\top.cpu.$group_298'.
     1/1: \payload__rd$122$next
Creating decoders for process `\top.cpu.$group_297'.
     1/1: \payload__pc$120$next
Creating decoders for process `\top.cpu.$group_296'.
     1/1: \payload__result$92$next
Creating decoders for process `\top.cpu.$group_295'.
     1/1: \payload__csr_result$116$next
Creating decoders for process `\top.cpu.$group_294'.
     1/1: \payload__csr_we$115$next
Creating decoders for process `\top.cpu.$group_293'.
     1/1: \payload__csr_adr$113$next
Creating decoders for process `\top.cpu.$group_292'.
     1/1: \payload__csr$111$next
Creating decoders for process `\top.cpu.$group_291'.
     1/1: \payload__branch_predict_taken$109$next
Creating decoders for process `\top.cpu.$group_290'.
     1/1: \payload__branch_target$108$next
Creating decoders for process `\top.cpu.$group_289'.
     1/1: \payload__branch_taken$next
Creating decoders for process `\top.cpu.$group_288'.
     1/1: \payload__condition_met$106$next
Creating decoders for process `\top.cpu.$group_287'.
     1/1: \payload__mret$117$next
Creating decoders for process `\top.cpu.$group_286'.
     1/1: \payload__shift$94$next
Creating decoders for process `\top.cpu.$group_285'.
     1/1: \payload__compare$101$next
Creating decoders for process `\top.cpu.$group_284'.
     1/1: \payload__store_data$99$next
Creating decoders for process `\top.cpu.$group_283'.
     1/1: \payload__store$98$next
Creating decoders for process `\top.cpu.$group_282'.
     1/1: \payload__load$96$next
Creating decoders for process `\top.cpu.$group_281'.
     1/1: \payload__funct3$91$next
Creating decoders for process `\top.cpu.$group_280'.
     1/1: \payload__bypass_m$89$next
Creating decoders for process `\top.cpu.$group_279'.
     1/1: \payload__rd_we$87$next
Creating decoders for process `\top.cpu.$group_278'.
     1/1: \payload__rd$85$next
Creating decoders for process `\top.cpu.$group_277'.
     1/1: \payload__ebreak$83$next
Creating decoders for process `\top.cpu.$group_276'.
     1/1: \payload__ecall$81$next
Creating decoders for process `\top.cpu.$group_275'.
     1/1: \payload__loadstore_misaligned$79$next
Creating decoders for process `\top.cpu.$group_274'.
     1/1: \payload__illegal$78$next
Creating decoders for process `\top.cpu.$group_273'.
     1/1: \payload__fetch_badaddr$76$next
Creating decoders for process `\top.cpu.$group_272'.
     1/1: \payload__fetch_error$74$next
Creating decoders for process `\top.cpu.$group_271'.
     1/1: \payload__instruction$72$next
Creating decoders for process `\top.cpu.$group_270'.
     1/1: \payload__pc$70$next
Creating decoders for process `\top.cpu.$group_269'.
     1/1: \x_branch_target
Creating decoders for process `\top.cpu.$group_268'.
Creating decoders for process `\top.cpu.$group_267'.
Creating decoders for process `\top.cpu.$group_266'.
     1/1: \payload__src2$44$next
Creating decoders for process `\top.cpu.$group_265'.
     1/1: \payload__branch_target$61$next
Creating decoders for process `\top.cpu.$group_264'.
     1/1: \payload__branch_predict_taken$62$next
Creating decoders for process `\top.cpu.$group_263'.
     1/1: \payload__store_operand$45$next
Creating decoders for process `\top.cpu.$group_262'.
     1/1: \payload__src1$43$next
Creating decoders for process `\top.cpu.$group_261'.
     1/1: \payload__mret$68$next
Creating decoders for process `\top.cpu.$group_260'.
     1/1: \payload__ebreak$67$next
Creating decoders for process `\top.cpu.$group_259'.
     1/1: \payload__ecall$66$next
Creating decoders for process `\top.cpu.$group_258'.
     1/1: \payload__csr_we$65$next
Creating decoders for process `\top.cpu.$group_257'.
     1/1: \payload__csr_adr$64$next
Creating decoders for process `\top.cpu.$group_256'.
     1/1: \payload__csr$63$next
Creating decoders for process `\top.cpu.$group_255'.
     1/1: \payload__fence_i$next
Creating decoders for process `\top.cpu.$group_254'.
     1/1: \payload__branch$60$next
Creating decoders for process `\top.cpu.$group_253'.
     1/1: \payload__jump$58$next
Creating decoders for process `\top.cpu.$group_252'.
     1/1: \payload__sext$57$next
Creating decoders for process `\top.cpu.$group_251'.
     1/1: \payload__direction$56$next
Creating decoders for process `\top.cpu.$group_250'.
     1/1: \payload__shift$55$next
Creating decoders for process `\top.cpu.$group_249'.
     1/1: \payload__logic$52$next
Creating decoders for process `\top.cpu.$group_248'.
     1/1: \payload__compare$59$next
Creating decoders for process `\top.cpu.$group_247'.
     1/1: \payload__adder_sub$51$next
Creating decoders for process `\top.cpu.$group_246'.
     1/1: \payload__store$50$next
Creating decoders for process `\top.cpu.$group_245'.
     1/1: \payload__load$49$next
Creating decoders for process `\top.cpu.$group_244'.
     1/1: \payload__funct3$48$next
Creating decoders for process `\top.cpu.$group_243'.
     1/1: \payload__bypass_m$47$next
Creating decoders for process `\top.cpu.$group_242'.
     1/1: \payload__bypass_x$46$next
Creating decoders for process `\top.cpu.$group_241'.
     1/1: \payload__rs1_re$42$next
Creating decoders for process `\top.cpu.$group_240'.
     1/1: \payload__rd_we$41$next
Creating decoders for process `\top.cpu.$group_239'.
     1/1: \payload__rs1$40$next
Creating decoders for process `\top.cpu.$group_238'.
     1/1: \payload__rd$39$next
Creating decoders for process `\top.cpu.$group_237'.
     1/1: \payload__illegal$38$next
Creating decoders for process `\top.cpu.$group_236'.
     1/1: \payload__fetch_badaddr$37$next
Creating decoders for process `\top.cpu.$group_235'.
     1/1: \payload__fetch_error$35$next
Creating decoders for process `\top.cpu.$group_234'.
     1/1: \payload__instruction$33$next
Creating decoders for process `\top.cpu.$group_233'.
     1/1: \payload__pc$31$next
Creating decoders for process `\top.cpu.$group_232'.
Creating decoders for process `\top.cpu.$group_231'.
     1/1: \payload__fetch_badaddr$29$next
Creating decoders for process `\top.cpu.$group_230'.
     1/1: \payload__fetch_error$28$next
Creating decoders for process `\top.cpu.$group_229'.
     1/1: \payload__instruction$27$next
Creating decoders for process `\top.cpu.$group_228'.
     1/1: \payload__pc$26$next
Creating decoders for process `\top.cpu.$group_227'.
     1/1: \payload__pc$24$next
Creating decoders for process `\top.cpu.$group_226'.
Creating decoders for process `\top.cpu.$group_225'.
Creating decoders for process `\top.cpu.$group_224'.
Creating decoders for process `\top.cpu.$group_223'.
Creating decoders for process `\top.cpu.$group_222'.
Creating decoders for process `\top.cpu.$group_221'.
     1/1: \d_src2
Creating decoders for process `\top.cpu.$group_220'.
     1/1: \d_src1
Creating decoders for process `\top.cpu.$group_219'.
Creating decoders for process `\top.cpu.$group_218'.
Creating decoders for process `\top.cpu.$group_217'.
     1/1: \gprf_wp__en
Creating decoders for process `\top.cpu.$group_216'.
Creating decoders for process `\top.cpu.$group_215'.
Creating decoders for process `\top.cpu.$group_214'.
     1/1: \csrf_wp__en
Creating decoders for process `\top.cpu.$group_213'.
     1/1: \x_csr_result
Creating decoders for process `\top.cpu.$group_212'.
     1/1: \w_result
Creating decoders for process `\top.cpu.$group_211'.
     1/1: \m_result
Creating decoders for process `\top.cpu.$group_210'.
     1/1: \x_result
Creating decoders for process `\top.cpu.$group_209'.
Creating decoders for process `\top.cpu.$group_208'.
     1/1: \d_lock_m
Creating decoders for process `\top.cpu.$group_207'.
     1/1: \d_lock_x
Creating decoders for process `\top.cpu.$group_206'.
     1/1: \d_raw_csr_m
Creating decoders for process `\top.cpu.$group_205'.
     1/1: \d_raw_csr_x
Creating decoders for process `\top.cpu.$group_204'.
     1/1: \d_raw_rs2_w
Creating decoders for process `\top.cpu.$group_203'.
     1/1: \d_raw_rs1_w
Creating decoders for process `\top.cpu.$group_202'.
     1/1: \d_raw_rs2_m
Creating decoders for process `\top.cpu.$group_201'.
     1/1: \d_raw_rs1_m
Creating decoders for process `\top.cpu.$group_200'.
     1/1: \d_raw_rs2_x
Creating decoders for process `\top.cpu.$group_199'.
     1/1: \d_raw_rs1_x
Creating decoders for process `\top.cpu.$group_198'.
Creating decoders for process `\top.cpu.$group_197'.
Creating decoders for process `\top.cpu.$group_196'.
Creating decoders for process `\top.cpu.$group_195'.
Creating decoders for process `\top.cpu.$group_194'.
Creating decoders for process `\top.cpu.$group_193'.
Creating decoders for process `\top.cpu.$group_192'.
Creating decoders for process `\top.cpu.$group_191'.
Creating decoders for process `\top.cpu.$group_190'.
Creating decoders for process `\top.cpu.$group_189'.
Creating decoders for process `\top.cpu.$group_188'.
Creating decoders for process `\top.cpu.$group_187'.
Creating decoders for process `\top.cpu.$group_186'.
Creating decoders for process `\top.cpu.$group_185'.
Creating decoders for process `\top.cpu.$group_184'.
Creating decoders for process `\top.cpu.$group_183'.
Creating decoders for process `\top.cpu.$group_182'.
Creating decoders for process `\top.cpu.$group_181'.
Creating decoders for process `\top.cpu.$group_180'.
Creating decoders for process `\top.cpu.$group_179'.
Creating decoders for process `\top.cpu.$group_178'.
Creating decoders for process `\top.cpu.$group_177'.
Creating decoders for process `\top.cpu.$group_176'.
Creating decoders for process `\top.cpu.$group_175'.
Creating decoders for process `\top.cpu.$group_174'.
Creating decoders for process `\top.cpu.$group_173'.
Creating decoders for process `\top.cpu.$group_172'.
Creating decoders for process `\top.cpu.$group_171'.
Creating decoders for process `\top.cpu.$group_170'.
Creating decoders for process `\top.cpu.$group_169'.
Creating decoders for process `\top.cpu.$group_168'.
Creating decoders for process `\top.cpu.$group_167'.
Creating decoders for process `\top.cpu.$group_166'.
Creating decoders for process `\top.cpu.$group_165'.
Creating decoders for process `\top.cpu.$group_164'.
Creating decoders for process `\top.cpu.$group_163'.
Creating decoders for process `\top.cpu.$group_162'.
Creating decoders for process `\top.cpu.$group_161'.
Creating decoders for process `\top.cpu.$group_160'.
Creating decoders for process `\top.cpu.$group_159'.
Creating decoders for process `\top.cpu.$group_158'.
Creating decoders for process `\top.cpu.$group_157'.
Creating decoders for process `\top.cpu.$group_156'.
Creating decoders for process `\top.cpu.$group_155'.
Creating decoders for process `\top.cpu.$group_154'.
Creating decoders for process `\top.cpu.$group_153'.
Creating decoders for process `\top.cpu.$group_152'.
Creating decoders for process `\top.cpu.$group_151'.
Creating decoders for process `\top.cpu.$group_150'.
Creating decoders for process `\top.cpu.$group_149'.
Creating decoders for process `\top.cpu.$group_148'.
Creating decoders for process `\top.cpu.$group_147'.
     1/1: \compare_op
Creating decoders for process `\top.cpu.$group_146'.
Creating decoders for process `\top.cpu.$group_145'.
Creating decoders for process `\top.cpu.$group_144'.
Creating decoders for process `\top.cpu.$group_143'.
Creating decoders for process `\top.cpu.$group_142'.
Creating decoders for process `\top.cpu.$group_141'.
Creating decoders for process `\top.cpu.$group_140'.
Creating decoders for process `\top.cpu.$group_139'.
Creating decoders for process `\top.cpu.$group_138'.
Creating decoders for process `\top.cpu.$group_137'.
Creating decoders for process `\top.cpu.$group_136'.
Creating decoders for process `\top.cpu.$group_135'.
Creating decoders for process `\top.cpu.$group_134'.
Creating decoders for process `\top.cpu.$group_133'.
     1/1: \csrf_rp__addr$next
Creating decoders for process `\top.cpu.$group_132'.
     1/1: \gprf_rp2__addr
Creating decoders for process `\top.cpu.$group_131'.
     1/1: \gprf_rp1__addr
Creating decoders for process `\top.cpu.$group_130'.
Creating decoders for process `\top.cpu.$group_129'.
Creating decoders for process `\top.cpu.$group_128'.
Creating decoders for process `\top.cpu.$group_127'.
Creating decoders for process `\top.cpu.$group_126'.
Creating decoders for process `\top.cpu.$group_125'.
Creating decoders for process `\top.cpu.$group_124'.
Creating decoders for process `\top.cpu.$group_123'.
Creating decoders for process `\top.cpu.$group_122'.
Creating decoders for process `\top.cpu.$group_121'.
Creating decoders for process `\top.cpu.$group_120'.
Creating decoders for process `\top.cpu.$group_119'.
Creating decoders for process `\top.cpu.$group_118'.
Creating decoders for process `\top.cpu.$group_117'.
Creating decoders for process `\top.cpu.$group_116'.
Creating decoders for process `\top.cpu.$group_115'.
Creating decoders for process `\top.cpu.$group_114'.
Creating decoders for process `\top.cpu.$group_113'.
Creating decoders for process `\top.cpu.$group_112'.
Creating decoders for process `\top.cpu.$group_111'.
Creating decoders for process `\top.cpu.$group_110'.
Creating decoders for process `\top.cpu.$group_109'.
Creating decoders for process `\top.cpu.$group_108'.
Creating decoders for process `\top.cpu.$group_107'.
Creating decoders for process `\top.cpu.$group_106'.
Creating decoders for process `\top.cpu.$group_105'.
Creating decoders for process `\top.cpu.$group_104'.
Creating decoders for process `\top.cpu.$group_103'.
Creating decoders for process `\top.cpu.$group_102'.
Creating decoders for process `\top.cpu.$group_101'.
Creating decoders for process `\top.cpu.$group_100'.
Creating decoders for process `\top.cpu.$group_99'.
Creating decoders for process `\top.cpu.$group_98'.
Creating decoders for process `\top.cpu.$group_97'.
Creating decoders for process `\top.cpu.$group_96'.
Creating decoders for process `\top.cpu.$group_95'.
Creating decoders for process `\top.cpu.$group_94'.
Creating decoders for process `\top.cpu.$group_93'.
Creating decoders for process `\top.cpu.$group_92'.
Creating decoders for process `\top.cpu.$group_91'.
Creating decoders for process `\top.cpu.$group_90'.
Creating decoders for process `\top.cpu.$group_89'.
Creating decoders for process `\top.cpu.$group_88'.
Creating decoders for process `\top.cpu.$group_87'.
Creating decoders for process `\top.cpu.$group_86'.
Creating decoders for process `\top.cpu.$group_85'.
Creating decoders for process `\top.cpu.$group_84'.
Creating decoders for process `\top.cpu.$group_83'.
Creating decoders for process `\top.cpu.$group_82'.
Creating decoders for process `\top.cpu.$group_81'.
Creating decoders for process `\top.cpu.$group_80'.
Creating decoders for process `\top.cpu.$group_79'.
Creating decoders for process `\top.cpu.$group_78'.
Creating decoders for process `\top.cpu.$group_77'.
Creating decoders for process `\top.cpu.$group_76'.
Creating decoders for process `\top.cpu.$group_75'.
Creating decoders for process `\top.cpu.$group_74'.
Creating decoders for process `\top.cpu.$group_73'.
Creating decoders for process `\top.cpu.$group_72'.
Creating decoders for process `\top.cpu.$group_71'.
Creating decoders for process `\top.cpu.$group_70'.
Creating decoders for process `\top.cpu.$group_69'.
Creating decoders for process `\top.cpu.$group_68'.
Creating decoders for process `\top.cpu.$group_67'.
Creating decoders for process `\top.cpu.$group_66'.
Creating decoders for process `\top.cpu.$group_65'.
Creating decoders for process `\top.cpu.$group_64'.
Creating decoders for process `\top.cpu.$group_63'.
Creating decoders for process `\top.cpu.$group_62'.
Creating decoders for process `\top.cpu.$group_61'.
Creating decoders for process `\top.cpu.$group_60'.
Creating decoders for process `\top.cpu.$group_59'.
Creating decoders for process `\top.cpu.$group_58'.
Creating decoders for process `\top.cpu.$group_57'.
Creating decoders for process `\top.cpu.$group_56'.
Creating decoders for process `\top.cpu.$group_55'.
Creating decoders for process `\top.cpu.$group_54'.
Creating decoders for process `\top.cpu.$group_53'.
Creating decoders for process `\top.cpu.$group_52'.
Creating decoders for process `\top.cpu.$group_51'.
Creating decoders for process `\top.cpu.$group_50'.
Creating decoders for process `\top.cpu.$group_49'.
Creating decoders for process `\top.cpu.$group_48'.
Creating decoders for process `\top.cpu.$group_47'.
Creating decoders for process `\top.cpu.$group_46'.
Creating decoders for process `\top.cpu.$group_45'.
Creating decoders for process `\top.cpu.$group_44'.
Creating decoders for process `\top.cpu.$group_43'.
Creating decoders for process `\top.cpu.$group_42'.
Creating decoders for process `\top.cpu.$group_41'.
Creating decoders for process `\top.cpu.$group_40'.
Creating decoders for process `\top.cpu.$group_39'.
Creating decoders for process `\top.cpu.$group_38'.
Creating decoders for process `\top.cpu.$group_37'.
Creating decoders for process `\top.cpu.$group_36'.
Creating decoders for process `\top.cpu.$group_35'.
Creating decoders for process `\top.cpu.$group_34'.
Creating decoders for process `\top.cpu.$group_33'.
Creating decoders for process `\top.cpu.$group_32'.
Creating decoders for process `\top.cpu.$group_31'.
Creating decoders for process `\top.cpu.$group_30'.
Creating decoders for process `\top.cpu.$group_29'.
Creating decoders for process `\top.cpu.$group_28'.
Creating decoders for process `\top.cpu.$group_27'.
Creating decoders for process `\top.cpu.$group_26'.
Creating decoders for process `\top.cpu.$group_25'.
Creating decoders for process `\top.cpu.$group_24'.
Creating decoders for process `\top.cpu.$group_23'.
Creating decoders for process `\top.cpu.$group_22'.
Creating decoders for process `\top.cpu.$group_21'.
Creating decoders for process `\top.cpu.$group_20'.
Creating decoders for process `\top.cpu.$group_19'.
Creating decoders for process `\top.cpu.$group_18'.
Creating decoders for process `\top.cpu.$group_17'.
Creating decoders for process `\top.cpu.$group_16'.
Creating decoders for process `\top.cpu.$group_15'.
Creating decoders for process `\top.cpu.$group_14'.
Creating decoders for process `\top.cpu.$group_13'.
Creating decoders for process `\top.cpu.$group_12'.
Creating decoders for process `\top.cpu.$group_11'.
Creating decoders for process `\top.cpu.$group_10'.
Creating decoders for process `\top.cpu.$group_9'.
Creating decoders for process `\top.cpu.$group_8'.
Creating decoders for process `\top.cpu.$group_7'.
Creating decoders for process `\top.cpu.$group_6'.
Creating decoders for process `\top.cpu.$group_5'.
Creating decoders for process `\top.cpu.$group_4'.
Creating decoders for process `\top.cpu.$group_3'.
Creating decoders for process `\top.cpu.$group_2'.
Creating decoders for process `\top.cpu.$group_1'.
Creating decoders for process `\top.cpu.$group_0'.
Creating decoders for process `\top.cpu.csrf.$group_82'.
     1/32: \irq_pending__w__value [31]
     2/32: \irq_pending__w__value [30]
     3/32: \irq_pending__w__value [29]
     4/32: \irq_pending__w__value [28]
     5/32: \irq_pending__w__value [27]
     6/32: \irq_pending__w__value [26]
     7/32: \irq_pending__w__value [25]
     8/32: \irq_pending__w__value [24]
     9/32: \irq_pending__w__value [23]
    10/32: \irq_pending__w__value [22]
    11/32: \irq_pending__w__value [21]
    12/32: \irq_pending__w__value [20]
    13/32: \irq_pending__w__value [19]
    14/32: \irq_pending__w__value [18]
    15/32: \irq_pending__w__value [17]
    16/32: \irq_pending__w__value [16]
    17/32: \irq_pending__w__value [15]
    18/32: \irq_pending__w__value [14]
    19/32: \irq_pending__w__value [13]
    20/32: \irq_pending__w__value [12]
    21/32: \irq_pending__w__value [11]
    22/32: \irq_pending__w__value [10]
    23/32: \irq_pending__w__value [9]
    24/32: \irq_pending__w__value [8]
    25/32: \irq_pending__w__value [7]
    26/32: \irq_pending__w__value [6]
    27/32: \irq_pending__w__value [5]
    28/32: \irq_pending__w__value [4]
    29/32: \irq_pending__w__value [3]
    30/32: \irq_pending__w__value [2]
    31/32: \irq_pending__w__value [1]
    32/32: \irq_pending__w__value [0]
Creating decoders for process `\top.cpu.csrf.$group_81'.
     1/1: \irq_pending__we
Creating decoders for process `\top.cpu.csrf.$group_80'.
     1/32: \irq_mask__w__value [31]
     2/32: \irq_mask__w__value [30]
     3/32: \irq_mask__w__value [29]
     4/32: \irq_mask__w__value [28]
     5/32: \irq_mask__w__value [27]
     6/32: \irq_mask__w__value [26]
     7/32: \irq_mask__w__value [25]
     8/32: \irq_mask__w__value [24]
     9/32: \irq_mask__w__value [23]
    10/32: \irq_mask__w__value [22]
    11/32: \irq_mask__w__value [21]
    12/32: \irq_mask__w__value [20]
    13/32: \irq_mask__w__value [19]
    14/32: \irq_mask__w__value [18]
    15/32: \irq_mask__w__value [17]
    16/32: \irq_mask__w__value [16]
    17/32: \irq_mask__w__value [15]
    18/32: \irq_mask__w__value [14]
    19/32: \irq_mask__w__value [13]
    20/32: \irq_mask__w__value [12]
    21/32: \irq_mask__w__value [11]
    22/32: \irq_mask__w__value [10]
    23/32: \irq_mask__w__value [9]
    24/32: \irq_mask__w__value [8]
    25/32: \irq_mask__w__value [7]
    26/32: \irq_mask__w__value [6]
    27/32: \irq_mask__w__value [5]
    28/32: \irq_mask__w__value [4]
    29/32: \irq_mask__w__value [3]
    30/32: \irq_mask__w__value [2]
    31/32: \irq_mask__w__value [1]
    32/32: \irq_mask__w__value [0]
Creating decoders for process `\top.cpu.csrf.$group_79'.
     1/1: \irq_mask__we
Creating decoders for process `\top.cpu.csrf.$group_66'.
     1/32: \mip__w__zero3 [19]
     2/32: \mip__w__zero3 [18]
     3/32: \mip__w__zero3 [17]
     4/32: \mip__w__zero3 [16]
     5/32: \mip__w__zero3 [15]
     6/32: \mip__w__zero3 [14]
     7/32: \mip__w__zero3 [13]
     8/32: \mip__w__zero3 [12]
     9/32: \mip__w__zero3 [11]
    10/32: \mip__w__zero3 [10]
    11/32: \mip__w__zero3 [9]
    12/32: \mip__w__zero3 [8]
    13/32: \mip__w__zero3 [7]
    14/32: \mip__w__zero3 [6]
    15/32: \mip__w__zero3 [5]
    16/32: \mip__w__zero3 [4]
    17/32: \mip__w__zero3 [3]
    18/32: \mip__w__zero3 [2]
    19/32: \mip__w__zero3 [1]
    20/32: \mip__w__zero3 [0]
    21/32: \mip__w__meip
    22/32: \mip__w__zero2
    23/32: \mip__w__seip
    24/32: \mip__w__ueip
    25/32: \mip__w__mtip
    26/32: \mip__w__zero1
    27/32: \mip__w__stip
    28/32: \mip__w__utip
    29/32: \mip__w__msip
    30/32: \mip__w__zero0
    31/32: \mip__w__ssip
    32/32: \mip__w__usip
Creating decoders for process `\top.cpu.csrf.$group_65'.
     1/1: \mip__we
Creating decoders for process `\top.cpu.csrf.$group_64'.
     1/32: \mtval__w__value [31]
     2/32: \mtval__w__value [30]
     3/32: \mtval__w__value [29]
     4/32: \mtval__w__value [28]
     5/32: \mtval__w__value [27]
     6/32: \mtval__w__value [26]
     7/32: \mtval__w__value [25]
     8/32: \mtval__w__value [24]
     9/32: \mtval__w__value [23]
    10/32: \mtval__w__value [22]
    11/32: \mtval__w__value [21]
    12/32: \mtval__w__value [20]
    13/32: \mtval__w__value [19]
    14/32: \mtval__w__value [18]
    15/32: \mtval__w__value [17]
    16/32: \mtval__w__value [16]
    17/32: \mtval__w__value [15]
    18/32: \mtval__w__value [14]
    19/32: \mtval__w__value [13]
    20/32: \mtval__w__value [12]
    21/32: \mtval__w__value [11]
    22/32: \mtval__w__value [10]
    23/32: \mtval__w__value [9]
    24/32: \mtval__w__value [8]
    25/32: \mtval__w__value [7]
    26/32: \mtval__w__value [6]
    27/32: \mtval__w__value [5]
    28/32: \mtval__w__value [4]
    29/32: \mtval__w__value [3]
    30/32: \mtval__w__value [2]
    31/32: \mtval__w__value [1]
    32/32: \mtval__w__value [0]
Creating decoders for process `\top.cpu.csrf.$group_63'.
     1/1: \mtval__we
Creating decoders for process `\top.cpu.csrf.$group_61'.
     1/32: \mcause__w__ecode [30]
     2/32: \mcause__w__ecode [29]
     3/32: \mcause__w__ecode [28]
     4/32: \mcause__w__ecode [27]
     5/32: \mcause__w__ecode [26]
     6/32: \mcause__w__ecode [25]
     7/32: \mcause__w__ecode [24]
     8/32: \mcause__w__ecode [23]
     9/32: \mcause__w__ecode [22]
    10/32: \mcause__w__ecode [21]
    11/32: \mcause__w__ecode [20]
    12/32: \mcause__w__ecode [19]
    13/32: \mcause__w__ecode [18]
    14/32: \mcause__w__ecode [17]
    15/32: \mcause__w__ecode [16]
    16/32: \mcause__w__ecode [15]
    17/32: \mcause__w__ecode [14]
    18/32: \mcause__w__ecode [13]
    19/32: \mcause__w__ecode [12]
    20/32: \mcause__w__ecode [11]
    21/32: \mcause__w__ecode [10]
    22/32: \mcause__w__ecode [9]
    23/32: \mcause__w__ecode [8]
    24/32: \mcause__w__ecode [7]
    25/32: \mcause__w__ecode [6]
    26/32: \mcause__w__ecode [5]
    27/32: \mcause__w__ecode [4]
    28/32: \mcause__w__ecode [3]
    29/32: \mcause__w__ecode [2]
    30/32: \mcause__w__ecode [1]
    31/32: \mcause__w__ecode [0]
    32/32: \mcause__w__interrupt
Creating decoders for process `\top.cpu.csrf.$group_60'.
     1/1: \mcause__we
Creating decoders for process `\top.cpu.csrf.$group_58'.
     1/32: \mepc__w__base [29]
     2/32: \mepc__w__base [28]
     3/32: \mepc__w__base [27]
     4/32: \mepc__w__base [26]
     5/32: \mepc__w__base [25]
     6/32: \mepc__w__base [24]
     7/32: \mepc__w__base [23]
     8/32: \mepc__w__base [22]
     9/32: \mepc__w__base [21]
    10/32: \mepc__w__base [20]
    11/32: \mepc__w__base [19]
    12/32: \mepc__w__base [18]
    13/32: \mepc__w__base [17]
    14/32: \mepc__w__base [16]
    15/32: \mepc__w__base [15]
    16/32: \mepc__w__base [14]
    17/32: \mepc__w__base [13]
    18/32: \mepc__w__base [12]
    19/32: \mepc__w__base [11]
    20/32: \mepc__w__base [10]
    21/32: \mepc__w__base [9]
    22/32: \mepc__w__base [8]
    23/32: \mepc__w__base [7]
    24/32: \mepc__w__base [6]
    25/32: \mepc__w__base [5]
    26/32: \mepc__w__base [4]
    27/32: \mepc__w__base [3]
    28/32: \mepc__w__base [2]
    29/32: \mepc__w__base [1]
    30/32: \mepc__w__base [0]
    31/32: \mepc__w__zero [0]
    32/32: \mepc__w__zero [1]
Creating decoders for process `\top.cpu.csrf.$group_57'.
     1/1: \mepc__we
Creating decoders for process `\top.cpu.csrf.$group_56'.
     1/32: \mscratch__w__value [31]
     2/32: \mscratch__w__value [30]
     3/32: \mscratch__w__value [29]
     4/32: \mscratch__w__value [28]
     5/32: \mscratch__w__value [27]
     6/32: \mscratch__w__value [26]
     7/32: \mscratch__w__value [25]
     8/32: \mscratch__w__value [24]
     9/32: \mscratch__w__value [23]
    10/32: \mscratch__w__value [22]
    11/32: \mscratch__w__value [21]
    12/32: \mscratch__w__value [20]
    13/32: \mscratch__w__value [19]
    14/32: \mscratch__w__value [18]
    15/32: \mscratch__w__value [17]
    16/32: \mscratch__w__value [16]
    17/32: \mscratch__w__value [15]
    18/32: \mscratch__w__value [14]
    19/32: \mscratch__w__value [13]
    20/32: \mscratch__w__value [12]
    21/32: \mscratch__w__value [11]
    22/32: \mscratch__w__value [10]
    23/32: \mscratch__w__value [9]
    24/32: \mscratch__w__value [8]
    25/32: \mscratch__w__value [7]
    26/32: \mscratch__w__value [6]
    27/32: \mscratch__w__value [5]
    28/32: \mscratch__w__value [4]
    29/32: \mscratch__w__value [3]
    30/32: \mscratch__w__value [2]
    31/32: \mscratch__w__value [1]
    32/32: \mscratch__w__value [0]
Creating decoders for process `\top.cpu.csrf.$group_55'.
     1/1: \mscratch__we
Creating decoders for process `\top.cpu.csrf.$group_53'.
     1/32: \mtvec__w__base [29]
     2/32: \mtvec__w__base [28]
     3/32: \mtvec__w__base [27]
     4/32: \mtvec__w__base [26]
     5/32: \mtvec__w__base [25]
     6/32: \mtvec__w__base [24]
     7/32: \mtvec__w__base [23]
     8/32: \mtvec__w__base [22]
     9/32: \mtvec__w__base [21]
    10/32: \mtvec__w__base [20]
    11/32: \mtvec__w__base [19]
    12/32: \mtvec__w__base [18]
    13/32: \mtvec__w__base [17]
    14/32: \mtvec__w__base [16]
    15/32: \mtvec__w__base [15]
    16/32: \mtvec__w__base [14]
    17/32: \mtvec__w__base [13]
    18/32: \mtvec__w__base [12]
    19/32: \mtvec__w__base [11]
    20/32: \mtvec__w__base [10]
    21/32: \mtvec__w__base [9]
    22/32: \mtvec__w__base [8]
    23/32: \mtvec__w__base [7]
    24/32: \mtvec__w__base [6]
    25/32: \mtvec__w__base [5]
    26/32: \mtvec__w__base [4]
    27/32: \mtvec__w__base [3]
    28/32: \mtvec__w__base [2]
    29/32: \mtvec__w__base [1]
    30/32: \mtvec__w__base [0]
    31/32: \mtvec__w__mode [0]
    32/32: \mtvec__w__mode [1]
Creating decoders for process `\top.cpu.csrf.$group_52'.
     1/1: \mtvec__we
Creating decoders for process `\top.cpu.csrf.$group_39'.
     1/32: \mie__w__zero3 [19]
     2/32: \mie__w__zero3 [18]
     3/32: \mie__w__zero3 [17]
     4/32: \mie__w__zero3 [16]
     5/32: \mie__w__zero3 [15]
     6/32: \mie__w__zero3 [14]
     7/32: \mie__w__zero3 [13]
     8/32: \mie__w__zero3 [12]
     9/32: \mie__w__zero3 [11]
    10/32: \mie__w__zero3 [10]
    11/32: \mie__w__zero3 [9]
    12/32: \mie__w__zero3 [8]
    13/32: \mie__w__zero3 [7]
    14/32: \mie__w__zero3 [6]
    15/32: \mie__w__zero3 [5]
    16/32: \mie__w__zero3 [4]
    17/32: \mie__w__zero3 [3]
    18/32: \mie__w__zero3 [2]
    19/32: \mie__w__zero3 [1]
    20/32: \mie__w__zero3 [0]
    21/32: \mie__w__meie
    22/32: \mie__w__zero2
    23/32: \mie__w__seie
    24/32: \mie__w__ueie
    25/32: \mie__w__mtie
    26/32: \mie__w__zero1
    27/32: \mie__w__stie
    28/32: \mie__w__utie
    29/32: \mie__w__msie
    30/32: \mie__w__zero0
    31/32: \mie__w__ssie
    32/32: \mie__w__usie
Creating decoders for process `\top.cpu.csrf.$group_38'.
     1/1: \mie__we
Creating decoders for process `\top.cpu.csrf.$group_35'.
     1/32: \misa__w__mxl [1]
     2/32: \misa__w__mxl [0]
     3/32: \misa__w__zero [2]
     4/32: \misa__w__zero [1]
     5/32: \misa__w__zero [0]
     6/32: \misa__w__extensions [24]
     7/32: \misa__w__extensions [23]
     8/32: \misa__w__extensions [22]
     9/32: \misa__w__extensions [21]
    10/32: \misa__w__extensions [20]
    11/32: \misa__w__extensions [19]
    12/32: \misa__w__extensions [18]
    13/32: \misa__w__extensions [17]
    14/32: \misa__w__extensions [16]
    15/32: \misa__w__extensions [15]
    16/32: \misa__w__extensions [14]
    17/32: \misa__w__extensions [13]
    18/32: \misa__w__extensions [12]
    19/32: \misa__w__extensions [11]
    20/32: \misa__w__extensions [10]
    21/32: \misa__w__extensions [9]
    22/32: \misa__w__extensions [8]
    23/32: \misa__w__extensions [7]
    24/32: \misa__w__extensions [6]
    25/32: \misa__w__extensions [5]
    26/32: \misa__w__extensions [4]
    27/32: \misa__w__extensions [3]
    28/32: \misa__w__extensions [2]
    29/32: \misa__w__extensions [1]
    30/32: \misa__w__extensions [0]
    31/32: \misa__w__extensions [25]
    32/32: \misa__w__zero [3]
Creating decoders for process `\top.cpu.csrf.$group_34'.
     1/1: \misa__we
Creating decoders for process `\top.cpu.csrf.$group_13'.
     1/32: \mstatus__w__zero3 [7]
     2/32: \mstatus__w__zero3 [6]
     3/32: \mstatus__w__zero3 [5]
     4/32: \mstatus__w__zero3 [4]
     5/32: \mstatus__w__zero3 [3]
     6/32: \mstatus__w__zero3 [2]
     7/32: \mstatus__w__zero3 [1]
     8/32: \mstatus__w__zero3 [0]
     9/32: \mstatus__w__xs [0]
    10/32: \mstatus__w__fs [0]
    11/32: \mstatus__w__mpp [0]
    12/32: \mstatus__w__zero2 [0]
    13/32: \mstatus__w__xs [1]
    14/32: \mstatus__w__tsr
    15/32: \mstatus__w__tw
    16/32: \mstatus__w__tvm
    17/32: \mstatus__w__mxr
    18/32: \mstatus__w__sum
    19/32: \mstatus__w__mprv
    20/32: \mstatus__w__fs [1]
    21/32: \mstatus__w__mpp [1]
    22/32: \mstatus__w__zero2 [1]
    23/32: \mstatus__w__sd
    24/32: \mstatus__w__spp
    25/32: \mstatus__w__mpie
    26/32: \mstatus__w__zero1
    27/32: \mstatus__w__spie
    28/32: \mstatus__w__upie
    29/32: \mstatus__w__mie
    30/32: \mstatus__w__zero0
    31/32: \mstatus__w__sie
    32/32: \mstatus__w__uie
Creating decoders for process `\top.cpu.csrf.$group_12'.
     1/1: \mstatus__we
Creating decoders for process `\top.cpu.csrf.$group_11'.
     1/1: \irq_pending__re
Creating decoders for process `\top.cpu.csrf.$group_10'.
     1/1: \irq_mask__re
Creating decoders for process `\top.cpu.csrf.$group_9'.
     1/1: \mip__re
Creating decoders for process `\top.cpu.csrf.$group_8'.
     1/1: \mtval__re
Creating decoders for process `\top.cpu.csrf.$group_7'.
     1/1: \mcause__re
Creating decoders for process `\top.cpu.csrf.$group_6'.
     1/1: \mepc__re
Creating decoders for process `\top.cpu.csrf.$group_5'.
     1/1: \mscratch__re
Creating decoders for process `\top.cpu.csrf.$group_4'.
     1/1: \mtvec__re
Creating decoders for process `\top.cpu.csrf.$group_3'.
     1/1: \mie__re
Creating decoders for process `\top.cpu.csrf.$group_2'.
     1/1: \misa__re
Creating decoders for process `\top.cpu.csrf.$group_1'.
     1/1: \rp__data
Creating decoders for process `\top.cpu.csrf.$group_0'.
     1/1: \mstatus__re
Creating decoders for process `\top.cpu.gprf.mem.$group_11'.
     1/1: \rp2__data
Creating decoders for process `\top.cpu.gprf.mem.$group_10'.
     1/1: \rp1__data
Creating decoders for process `\top.cpu.gprf.mem.$group_9'.
     1/2: \collision$next [1]
     2/2: \collision$next [0]
Creating decoders for process `\top.cpu.gprf.mem.$group_8'.
     1/1: \fwd_wp_data$next
Creating decoders for process `\top.cpu.gprf.mem.$group_7'.
     1/1: \fwd_wp_en$next
Creating decoders for process `\top.cpu.gprf.mem.$group_6'.
Creating decoders for process `\top.cpu.gprf.mem.$group_5'.
Creating decoders for process `\top.cpu.gprf.mem.$group_4'.
Creating decoders for process `\top.cpu.gprf.mem.$group_3'.
Creating decoders for process `\top.cpu.gprf.mem.$group_2'.
Creating decoders for process `\top.cpu.gprf.mem.$group_1'.
Creating decoders for process `\top.cpu.gprf.mem.$group_0'.
Creating decoders for process `\top.cpu.loadstore.$group_11'.
     1/1: \m_busy
Creating decoders for process `\top.cpu.loadstore.$group_10'.
Creating decoders for process `\top.cpu.loadstore.$group_9'.
     1/1: \m_badaddr$next
Creating decoders for process `\top.cpu.loadstore.$group_8'.
     1/1: \m_store_error$next
Creating decoders for process `\top.cpu.loadstore.$group_7'.
     1/1: \m_load_error$next
Creating decoders for process `\top.cpu.loadstore.$group_6'.
     1/1: \dbus__dat_w$next
Creating decoders for process `\top.cpu.loadstore.$group_5'.
     1/1: \dbus__we$next
Creating decoders for process `\top.cpu.loadstore.$group_4'.
     1/1: \dbus__sel$next
Creating decoders for process `\top.cpu.loadstore.$group_3'.
     1/1: \dbus__adr$next
Creating decoders for process `\top.cpu.loadstore.$group_2'.
     1/1: \m_load_data$next
Creating decoders for process `\top.cpu.loadstore.$group_1'.
     1/1: \dbus__stb$next
Creating decoders for process `\top.cpu.loadstore.$group_0'.
     1/1: \dbus__cyc$next
Creating decoders for process `\top.cpu.fetch.$group_44'.
     1/1: \f_instruction
Creating decoders for process `\top.cpu.fetch.$group_43'.
     1/1: \f_busy
Creating decoders for process `\top.cpu.fetch.$group_42'.
     1/1: \f_badaddr$next
Creating decoders for process `\top.cpu.fetch.$group_41'.
     1/1: \f_fetch_error$next
Creating decoders for process `\top.cpu.fetch.$group_40'.
Creating decoders for process `\top.cpu.fetch.$group_39'.
Creating decoders for process `\top.cpu.fetch.$group_38'.
     1/1: \ibus_arbiter_port__adr$6$next
Creating decoders for process `\top.cpu.fetch.$group_37'.
     1/1: \bare_rdata$next
Creating decoders for process `\top.cpu.fetch.$group_36'.
     1/1: \ibus_arbiter_port__stb$4$next
Creating decoders for process `\top.cpu.fetch.$group_35'.
     1/1: \ibus_arbiter_port__cyc$1$next
Creating decoders for process `\top.cpu.fetch.$group_34'.
Creating decoders for process `\top.cpu.fetch.$group_33'.
Creating decoders for process `\top.cpu.fetch.$group_32'.
Creating decoders for process `\top.cpu.fetch.$group_31'.
Creating decoders for process `\top.cpu.fetch.$group_30'.
Creating decoders for process `\top.cpu.fetch.$group_29'.
Creating decoders for process `\top.cpu.fetch.$group_28'.
Creating decoders for process `\top.cpu.fetch.$group_27'.
Creating decoders for process `\top.cpu.fetch.$group_26'.
Creating decoders for process `\top.cpu.fetch.$group_25'.
Creating decoders for process `\top.cpu.fetch.$group_24'.
Creating decoders for process `\top.cpu.fetch.$group_23'.
Creating decoders for process `\top.cpu.fetch.$group_22'.
Creating decoders for process `\top.cpu.fetch.$group_21'.
Creating decoders for process `\top.cpu.fetch.$group_20'.
Creating decoders for process `\top.cpu.fetch.$group_19'.
Creating decoders for process `\top.cpu.fetch.$group_18'.
Creating decoders for process `\top.cpu.fetch.$group_17'.
Creating decoders for process `\top.cpu.fetch.$group_16'.
Creating decoders for process `\top.cpu.fetch.$group_15'.
Creating decoders for process `\top.cpu.fetch.$group_14'.
Creating decoders for process `\top.cpu.fetch.$group_13'.
Creating decoders for process `\top.cpu.fetch.$group_12'.
Creating decoders for process `\top.cpu.fetch.$group_11'.
Creating decoders for process `\top.cpu.fetch.$group_8'.
Creating decoders for process `\top.cpu.fetch.$group_7'.
Creating decoders for process `\top.cpu.fetch.$group_6'.
Creating decoders for process `\top.cpu.fetch.$group_3'.
Creating decoders for process `\top.cpu.fetch.$group_2'.
     1/1: \f_flush$next
Creating decoders for process `\top.cpu.fetch.$group_1'.
     1/1: \f_icache_select$next
Creating decoders for process `\top.cpu.fetch.$group_0'.
     1/1: \a_icache_select
Creating decoders for process `\top.cpu.fetch.ibus_arbiter.$group_13'.
     1/2: \port__err$3
     2/2: \port__err
Creating decoders for process `\top.cpu.fetch.ibus_arbiter.$group_11'.
     1/2: \port__ack$2
     2/2: \port__ack
Creating decoders for process `\top.cpu.fetch.ibus_arbiter.$group_10'.
     1/1: \bus__bte
Creating decoders for process `\top.cpu.fetch.ibus_arbiter.$group_9'.
     1/1: \bus__cti
Creating decoders for process `\top.cpu.fetch.ibus_arbiter.$group_8'.
     1/1: \bus__we
Creating decoders for process `\top.cpu.fetch.ibus_arbiter.$group_7'.
     1/1: \bus__stb
Creating decoders for process `\top.cpu.fetch.ibus_arbiter.$group_6'.
     1/1: \bus__cyc
Creating decoders for process `\top.cpu.fetch.ibus_arbiter.$group_5'.
     1/1: \bus__sel
Creating decoders for process `\top.cpu.fetch.ibus_arbiter.$group_4'.
     1/1: \bus__dat_w
Creating decoders for process `\top.cpu.fetch.ibus_arbiter.$group_3'.
     1/1: \bus__adr
Creating decoders for process `\top.cpu.fetch.ibus_arbiter.$group_2'.
     1/2: \bus_pe_i$next [1]
     2/2: \bus_pe_i$next [0]
Creating decoders for process `\top.cpu.fetch.ibus_arbiter.$group_1'.
Creating decoders for process `\top.cpu.fetch.ibus_arbiter.$group_0'.
Creating decoders for process `\top.cpu.fetch.ibus_arbiter.bus_pe.$group_1'.
Creating decoders for process `\top.cpu.fetch.ibus_arbiter.bus_pe.$group_0'.
     1/1: \o
Creating decoders for process `\top.cpu.fetch.icache.$group_24'.
Creating decoders for process `\top.cpu.fetch.icache.$group_23'.
     1/4: \dat_mem_0_dat_mem_wp__en [3]
     2/4: \dat_mem_0_dat_mem_wp__en [2]
     3/4: \dat_mem_0_dat_mem_wp__en [1]
     4/4: \dat_mem_0_dat_mem_wp__en [0]
Creating decoders for process `\top.cpu.fetch.icache.$group_22'.
Creating decoders for process `\top.cpu.fetch.icache.$group_21'.
     1/1: \tag_mem_0_tag_mem_wp__data
Creating decoders for process `\top.cpu.fetch.icache.$group_20'.
     1/1: \tag_mem_0_tag_mem_wp__en
Creating decoders for process `\top.cpu.fetch.icache.$group_19'.
     1/1: \tag_mem_0_tag_mem_wp__addr
Creating decoders for process `\top.cpu.fetch.icache.$group_18'.
Creating decoders for process `\top.cpu.fetch.icache.$group_16'.
Creating decoders for process `\top.cpu.fetch.icache.$group_15'.
Creating decoders for process `\top.cpu.fetch.icache.$group_14'.
Creating decoders for process `\top.cpu.fetch.icache.$group_13'.
     1/1: \mem_rp_addr
Creating decoders for process `\top.cpu.fetch.icache.$group_12'.
     1/1: \bus_last
Creating decoders for process `\top.cpu.fetch.icache.$group_11'.
     1/1: \last_offset$next
Creating decoders for process `\top.cpu.fetch.icache.$group_10'.
     1/1: \bus_re$next
Creating decoders for process `\top.cpu.fetch.icache.$group_7'.
     1/3: \bus_addr__tag$next
     2/3: \bus_addr__offset$next
     3/3: \bus_addr__line$next
Creating decoders for process `\top.cpu.fetch.icache.$group_6'.
     1/1: \fsm_state$next
Creating decoders for process `\top.cpu.fetch.icache.$group_5'.
     1/1: \flush_line$next
Creating decoders for process `\top.cpu.fetch.icache.$group_4'.
     1/1: \s2_flush_ack$next
Creating decoders for process `\top.cpu.fetch.icache.$group_3'.
     1/1: \s2_rdata
Creating decoders for process `\top.cpu.fetch.icache.$group_2'.
Creating decoders for process `\top.cpu.fetch.icache.$group_1'.
Creating decoders for process `\top.cpu.fetch.icache.$group_0'.
Creating decoders for process `\top.cpu.fetch.icache.dat_mem_0.$group_8'.
     1/4: \dat_mem_rp__data [127:96]
     2/4: \dat_mem_rp__data [95:64]
     3/4: \dat_mem_rp__data [63:32]
     4/4: \dat_mem_rp__data [31:0]
Creating decoders for process `\top.cpu.fetch.icache.dat_mem_0.$group_7'.
     1/1: \collision$next
Creating decoders for process `\top.cpu.fetch.icache.dat_mem_0.$group_6'.
     1/1: \fwd_wp_data$next
Creating decoders for process `\top.cpu.fetch.icache.dat_mem_0.$group_5'.
     1/1: \fwd_wp_en$next
Creating decoders for process `\top.cpu.fetch.icache.dat_mem_0.$group_4'.
Creating decoders for process `\top.cpu.fetch.icache.dat_mem_0.$group_3'.
Creating decoders for process `\top.cpu.fetch.icache.dat_mem_0.$group_2'.
Creating decoders for process `\top.cpu.fetch.icache.dat_mem_0.$group_1'.
Creating decoders for process `\top.cpu.fetch.icache.dat_mem_0.$group_0'.
Creating decoders for process `\top.cpu.fetch.icache.tag_mem_0.$group_8'.
     1/1: \tag_mem_rp__data
Creating decoders for process `\top.cpu.fetch.icache.tag_mem_0.$group_7'.
     1/1: \collision$next
Creating decoders for process `\top.cpu.fetch.icache.tag_mem_0.$group_6'.
     1/1: \fwd_wp_data$next
Creating decoders for process `\top.cpu.fetch.icache.tag_mem_0.$group_5'.
     1/1: \fwd_wp_en$next
Creating decoders for process `\top.cpu.fetch.icache.tag_mem_0.$group_4'.
Creating decoders for process `\top.cpu.fetch.icache.tag_mem_0.$group_3'.
Creating decoders for process `\top.cpu.fetch.icache.tag_mem_0.$group_2'.
Creating decoders for process `\top.cpu.fetch.icache.tag_mem_0.$group_1'.
Creating decoders for process `\top.cpu.fetch.icache.tag_mem_0.$group_0'.
Creating decoders for process `\top.cpu.fetch.icache.way_hit.$group_1'.
     1/1: \n
Creating decoders for process `\top.cpu.fetch.icache.way_hit.$group_0'.
     1/1: \o
Creating decoders for process `\top.cpu.shifter.$group_4'.
Creating decoders for process `\top.cpu.shifter.$group_3'.
     1/1: \m_result$9$next
Creating decoders for process `\top.cpu.shifter.$group_2'.
     1/1: \m_direction$next
Creating decoders for process `\top.cpu.shifter.$group_1'.
Creating decoders for process `\top.cpu.shifter.$group_0'.
Creating decoders for process `\top.cpu.predict.$group_2'.
     1/1: \d_branch_taken
Creating decoders for process `\top.cpu.predict.$group_1'.
Creating decoders for process `\top.cpu.predict.$group_0'.
Creating decoders for process `\top.cpu.logic.$group_0'.
     1/1: \result
Creating decoders for process `\top.cpu.exception.$group_62'.
Creating decoders for process `\top.cpu.exception.$group_61'.
Creating decoders for process `\top.cpu.exception.$group_60'.
Creating decoders for process `\top.cpu.exception.$group_59'.
     1/1: \irq_pending__r__value$next
Creating decoders for process `\top.cpu.exception.$group_58'.
     1/1: \irq_mask__r__value$next
Creating decoders for process `\top.cpu.exception.$group_45'.
     1/13: \mip__r__meip$next
     2/13: \mip__r__mtip$next
     3/13: \mip__r__msip$next
     4/13: \mip__r__zero3$next
     5/13: \mip__r__seip$next
     6/13: \mip__r__ueip$next
     7/13: \mip__r__zero1$next
     8/13: \mip__r__stip$next
     9/13: \mip__r__utip$next
    10/13: \mip__r__zero0$next
    11/13: \mip__r__ssip$next
    12/13: \mip__r__usip$next
    13/13: \mip__r__zero2$next
Creating decoders for process `\top.cpu.exception.$group_44'.
     1/1: \mtval__r__value$next
Creating decoders for process `\top.cpu.exception.$group_42'.
     1/2: \mcause__r__interrupt$next
     2/2: \mcause__r__ecode$next
Creating decoders for process `\top.cpu.exception.$group_40'.
     1/2: \mepc__r__base$next
     2/2: \mepc__r__zero$next
Creating decoders for process `\top.cpu.exception.$group_39'.
     1/1: \mscratch__r__value$next
Creating decoders for process `\top.cpu.exception.$group_37'.
     1/2: \mtvec__r__base$next
     2/2: \mtvec__r__mode$next
Creating decoders for process `\top.cpu.exception.$group_24'.
     1/13: \mie__r__zero3$next
     2/13: \mie__r__zero2$next
     3/13: \mie__r__seie$next
     4/13: \mie__r__ueie$next
     5/13: \mie__r__mtie$next
     6/13: \mie__r__zero1$next
     7/13: \mie__r__stie$next
     8/13: \mie__r__utie$next
     9/13: \mie__r__msie$next
    10/13: \mie__r__zero0$next
    11/13: \mie__r__ssie$next
    12/13: \mie__r__usie$next
    13/13: \mie__r__meie$next
Creating decoders for process `\top.cpu.exception.$group_21'.
     1/3: \misa__r__mxl$next
     2/3: \misa__r__extensions$next
     3/3: \misa__r__zero$next
Creating decoders for process `\top.cpu.exception.$group_0'.
     1/21: \mstatus__r__sd$next
     2/21: \mstatus__r__tsr$next
     3/21: \mstatus__r__tw$next
     4/21: \mstatus__r__tvm$next
     5/21: \mstatus__r__mxr$next
     6/21: \mstatus__r__sum$next
     7/21: \mstatus__r__mprv$next
     8/21: \mstatus__r__xs$next
     9/21: \mstatus__r__fs$next
    10/21: \mstatus__r__mpp$next
    11/21: \mstatus__r__zero2$next
    12/21: \mstatus__r__spp$next
    13/21: \mstatus__r__mpie$next
    14/21: \mstatus__r__zero1$next
    15/21: \mstatus__r__spie$next
    16/21: \mstatus__r__upie$next
    17/21: \mstatus__r__mie$next
    18/21: \mstatus__r__zero0$next
    19/21: \mstatus__r__sie$next
    20/21: \mstatus__r__uie$next
    21/21: \mstatus__r__zero3$next
Creating decoders for process `\top.cpu.exception.interrupt_pe.$group_1'.
Creating decoders for process `\top.cpu.exception.interrupt_pe.$group_0'.
     1/1: \o
Creating decoders for process `\top.cpu.exception.trap_pe.$group_1'.
Creating decoders for process `\top.cpu.exception.trap_pe.$group_0'.
     1/1: \o
Creating decoders for process `\top.cpu.decoder.$group_40'.
Creating decoders for process `\top.cpu.decoder.$group_39'.
Creating decoders for process `\top.cpu.decoder.$group_38'.
Creating decoders for process `\top.cpu.decoder.$group_37'.
Creating decoders for process `\top.cpu.decoder.$group_36'.
Creating decoders for process `\top.cpu.decoder.$group_35'.
Creating decoders for process `\top.cpu.decoder.$group_34'.
Creating decoders for process `\top.cpu.decoder.$group_33'.
Creating decoders for process `\top.cpu.decoder.$group_32'.
Creating decoders for process `\top.cpu.decoder.$group_31'.
Creating decoders for process `\top.cpu.decoder.$group_30'.
Creating decoders for process `\top.cpu.decoder.$group_29'.
Creating decoders for process `\top.cpu.decoder.$group_28'.
Creating decoders for process `\top.cpu.decoder.$group_27'.
Creating decoders for process `\top.cpu.decoder.$group_26'.
Creating decoders for process `\top.cpu.decoder.$group_25'.
Creating decoders for process `\top.cpu.decoder.$group_24'.
Creating decoders for process `\top.cpu.decoder.$group_23'.
Creating decoders for process `\top.cpu.decoder.$group_22'.
Creating decoders for process `\top.cpu.decoder.$group_21'.
Creating decoders for process `\top.cpu.decoder.$group_20'.
Creating decoders for process `\top.cpu.decoder.$group_19'.
Creating decoders for process `\top.cpu.decoder.$group_18'.
Creating decoders for process `\top.cpu.decoder.$group_17'.
Creating decoders for process `\top.cpu.decoder.$group_16'.
Creating decoders for process `\top.cpu.decoder.$group_15'.
Creating decoders for process `\top.cpu.decoder.$group_14'.
Creating decoders for process `\top.cpu.decoder.$group_13'.
Creating decoders for process `\top.cpu.decoder.$group_12'.
Creating decoders for process `\top.cpu.decoder.$group_11'.
Creating decoders for process `\top.cpu.decoder.$group_10'.
     1/1: \immediate
Creating decoders for process `\top.cpu.decoder.$group_9'.
     1/1: \fmt
Creating decoders for process `\top.cpu.decoder.$group_8'.
Creating decoders for process `\top.cpu.decoder.$group_7'.
Creating decoders for process `\top.cpu.decoder.$group_6'.
Creating decoders for process `\top.cpu.decoder.$group_5'.
Creating decoders for process `\top.cpu.decoder.$group_4'.
Creating decoders for process `\top.cpu.decoder.$group_3'.
Creating decoders for process `\top.cpu.decoder.$group_2'.
Creating decoders for process `\top.cpu.decoder.$group_1'.
Creating decoders for process `\top.cpu.decoder.$group_0'.
Creating decoders for process `\top.cpu.compare.$group_0'.
     1/1: \condition_met
Creating decoders for process `\top.cpu.adder.$group_9'.
     1/1: \x_overflow
Creating decoders for process `\top.cpu.adder.$group_8'.
     1/1: \x_carry
Creating decoders for process `\top.cpu.adder.$group_7'.
     1/1: \x_result
Creating decoders for process `\top.cpu.adder.$group_6'.
Creating decoders for process `\top.cpu.adder.$group_4'.
Creating decoders for process `\top.cpu.adder.$group_3'.
Creating decoders for process `\top.cpu.adder.$group_1'.
Creating decoders for process `\top.cpu.adder.$group_0'.
     1/1: \x_sub$next
Creating decoders for process `\top.cpu.data_sel.$group_5'.
     1/1: \w_load_result
Creating decoders for process `\top.cpu.data_sel.$group_4'.
Creating decoders for process `\top.cpu.data_sel.$group_3'.
Creating decoders for process `\top.cpu.data_sel.$group_2'.
     1/1: \x_store_data
Creating decoders for process `\top.cpu.data_sel.$group_1'.
     1/1: \x_mask
Creating decoders for process `\top.cpu.data_sel.$group_0'.
     1/1: \x_misaligned
Creating decoders for process `\top.cpu.pc_sel.$group_3'.
Creating decoders for process `\top.cpu.pc_sel.$group_2'.
     1/1: \a_pc4
Creating decoders for process `\top.cpu.pc_sel.$group_1'.
     1/1: \m_sel
Creating decoders for process `\top.cpu.pc_sel.$group_0'.
     1/1: \m_pc4_a
Creating decoders for process `\top.cpu.w.$group_2'.
Creating decoders for process `\top.cpu.w.$group_1'.
Creating decoders for process `\top.cpu.w.$group_0'.
Creating decoders for process `\top.cpu.m.$group_5'.
Creating decoders for process `\top.cpu.m.$group_4'.
Creating decoders for process `\top.cpu.m.$group_3'.
Creating decoders for process `\top.cpu.m.$group_2'.
     1/1: \valid$1$next
Creating decoders for process `\top.cpu.m.$group_1'.
Creating decoders for process `\top.cpu.m.$group_0'.
Creating decoders for process `\top.cpu.x.$group_5'.
Creating decoders for process `\top.cpu.x.$group_4'.
Creating decoders for process `\top.cpu.x.$group_3'.
Creating decoders for process `\top.cpu.x.$group_2'.
     1/1: \valid$1$next
Creating decoders for process `\top.cpu.x.$group_1'.
Creating decoders for process `\top.cpu.x.$group_0'.
Creating decoders for process `\top.cpu.d.$group_5'.
Creating decoders for process `\top.cpu.d.$group_4'.
Creating decoders for process `\top.cpu.d.$group_3'.
Creating decoders for process `\top.cpu.d.$group_2'.
     1/1: \valid$1$next
Creating decoders for process `\top.cpu.d.$group_1'.
Creating decoders for process `\top.cpu.d.$group_0'.
Creating decoders for process `\top.cpu.f.$group_5'.
Creating decoders for process `\top.cpu.f.$group_4'.
Creating decoders for process `\top.cpu.f.$group_3'.
Creating decoders for process `\top.cpu.f.$group_2'.
     1/1: \valid$1$next
Creating decoders for process `\top.cpu.f.$group_1'.
Creating decoders for process `\top.cpu.f.$group_0'.
Creating decoders for process `\top.cpu.a.$group_3'.
Creating decoders for process `\top.cpu.a.$group_2'.
Creating decoders for process `\top.cpu.a.$group_1'.
Creating decoders for process `\top.cpu.a.$group_0'.
     1/1: \valid$next

2.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/share/ice40/cells_sim.v:1414$241'.
  created $adff cell `$procdff$2791' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/share/ice40/cells_sim.v:1353$234'.
  created $dff cell `$procdff$2792' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/share/ice40/cells_sim.v:1273$230'.
  created $adff cell `$procdff$2793' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/share/ice40/cells_sim.v:1212$223'.
  created $dff cell `$procdff$2794' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/share/ice40/cells_sim.v:1138$220'.
  created $adff cell `$procdff$2795' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/share/ice40/cells_sim.v:1088$217'.
  created $dff cell `$procdff$2796' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/share/ice40/cells_sim.v:1017$214'.
  created $adff cell `$procdff$2797' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/share/ice40/cells_sim.v:967$211'.
  created $dff cell `$procdff$2798' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/share/ice40/cells_sim.v:922$209'.
  created $dff cell `$procdff$2799' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/share/ice40/cells_sim.v:882$207'.
  created $dff cell `$procdff$2800' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/share/ice40/cells_sim.v:803$203'.
  created $adff cell `$procdff$2801' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/share/ice40/cells_sim.v:742$196'.
  created $dff cell `$procdff$2802' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/share/ice40/cells_sim.v:662$192'.
  created $adff cell `$procdff$2803' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/share/ice40/cells_sim.v:601$185'.
  created $dff cell `$procdff$2804' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/share/ice40/cells_sim.v:527$182'.
  created $adff cell `$procdff$2805' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/share/ice40/cells_sim.v:477$179'.
  created $dff cell `$procdff$2806' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/share/ice40/cells_sim.v:406$176'.
  created $adff cell `$procdff$2807' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/share/ice40/cells_sim.v:356$173'.
  created $dff cell `$procdff$2808' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/share/ice40/cells_sim.v:311$171'.
  created $dff cell `$procdff$2809' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/share/ice40/cells_sim.v:271$169'.
  created $dff cell `$procdff$2810' with positive edge clock.

2.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/share/ice40/cells_sim.v:0$244'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/share/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNES.$proc$/share/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNESS.$proc$/share/ice40/cells_sim.v:0$240'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/share/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNESS.$proc$/share/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNER.$proc$/share/ice40/cells_sim.v:0$233'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/share/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNER.$proc$/share/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNESR.$proc$/share/ice40/cells_sim.v:0$229'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/share/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNESR.$proc$/share/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNS.$proc$/share/ice40/cells_sim.v:0$222'.
Removing empty process `SB_DFFNS.$proc$/share/ice40/cells_sim.v:1138$220'.
Removing empty process `SB_DFFNSS.$proc$/share/ice40/cells_sim.v:0$219'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/share/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNSS.$proc$/share/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNR.$proc$/share/ice40/cells_sim.v:0$216'.
Removing empty process `SB_DFFNR.$proc$/share/ice40/cells_sim.v:1017$214'.
Removing empty process `SB_DFFNSR.$proc$/share/ice40/cells_sim.v:0$213'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/share/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNSR.$proc$/share/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNE.$proc$/share/ice40/cells_sim.v:0$210'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/share/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFNE.$proc$/share/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFN.$proc$/share/ice40/cells_sim.v:0$208'.
Removing empty process `SB_DFFN.$proc$/share/ice40/cells_sim.v:882$207'.
Removing empty process `SB_DFFES.$proc$/share/ice40/cells_sim.v:0$206'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/share/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFES.$proc$/share/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFESS.$proc$/share/ice40/cells_sim.v:0$202'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/share/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFESS.$proc$/share/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFER.$proc$/share/ice40/cells_sim.v:0$195'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/share/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFER.$proc$/share/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFESR.$proc$/share/ice40/cells_sim.v:0$191'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/share/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFESR.$proc$/share/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFS.$proc$/share/ice40/cells_sim.v:0$184'.
Removing empty process `SB_DFFS.$proc$/share/ice40/cells_sim.v:527$182'.
Removing empty process `SB_DFFSS.$proc$/share/ice40/cells_sim.v:0$181'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/share/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFSS.$proc$/share/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFR.$proc$/share/ice40/cells_sim.v:0$178'.
Removing empty process `SB_DFFR.$proc$/share/ice40/cells_sim.v:406$176'.
Removing empty process `SB_DFFSR.$proc$/share/ice40/cells_sim.v:0$175'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/share/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFSR.$proc$/share/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFE.$proc$/share/ice40/cells_sim.v:0$172'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/share/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFFE.$proc$/share/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFF.$proc$/share/ice40/cells_sim.v:0$170'.
Removing empty process `SB_DFF.$proc$/share/ice40/cells_sim.v:271$169'.
Removing empty process `top.$group_31'.
Removing empty process `top.$group_30'.
Removing empty process `top.$group_29'.
Removing empty process `top.$group_28'.
Removing empty process `top.$group_27'.
Removing empty process `top.$group_26'.
Removing empty process `top.$group_25'.
Removing empty process `top.$group_24'.
Removing empty process `top.$group_23'.
Removing empty process `top.$group_22'.
Removing empty process `top.$group_21'.
Removing empty process `top.$group_20'.
Removing empty process `top.$group_19'.
Removing empty process `top.$group_18'.
Removing empty process `top.$group_17'.
Removing empty process `top.$group_16'.
Removing empty process `top.$group_15'.
Removing empty process `top.$group_14'.
Removing empty process `top.$group_13'.
Removing empty process `top.$group_12'.
Removing empty process `top.$group_11'.
Removing empty process `top.$group_10'.
Removing empty process `top.$group_9'.
Removing empty process `top.$group_8'.
Removing empty process `top.$group_7'.
Removing empty process `top.$group_6'.
Removing empty process `top.$group_5'.
Removing empty process `top.$group_4'.
Removing empty process `top.$group_3'.
Removing empty process `top.$group_2'.
Removing empty process `top.$group_1'.
Removing empty process `top.$group_0'.
Removing empty process `top.cd_sync.$group_4'.
Removing empty process `top.cd_sync.$group_3'.
Found and cleaned up 1 empty switch in `\top.cd_sync.$group_2'.
Removing empty process `top.cd_sync.$group_2'.
Found and cleaned up 1 empty switch in `\top.cd_sync.$group_1'.
Removing empty process `top.cd_sync.$group_1'.
Removing empty process `top.cd_sync.$group_0'.
Removing empty process `top.csr_dec.$group_4'.
Found and cleaned up 1 empty switch in `\top.csr_dec.$group_3'.
Removing empty process `top.csr_dec.$group_3'.
Found and cleaned up 1 empty switch in `\top.csr_dec.$group_2'.
Removing empty process `top.csr_dec.$group_2'.
Removing empty process `top.csr_dec.$group_1'.
Removing empty process `top.csr_dec.$group_0'.
Found and cleaned up 4 empty switches in `\top.wb_csr.$group_6'.
Removing empty process `top.wb_csr.$group_6'.
Found and cleaned up 3 empty switches in `\top.wb_csr.$group_5'.
Removing empty process `top.wb_csr.$group_5'.
Found and cleaned up 4 empty switches in `\top.wb_csr.$group_4'.
Removing empty process `top.wb_csr.$group_4'.
Found and cleaned up 2 empty switches in `\top.wb_csr.$group_3'.
Removing empty process `top.wb_csr.$group_3'.
Found and cleaned up 2 empty switches in `\top.wb_csr.$group_2'.
Removing empty process `top.wb_csr.$group_2'.
Found and cleaned up 2 empty switches in `\top.wb_csr.$group_1'.
Removing empty process `top.wb_csr.$group_1'.
Removing empty process `top.wb_csr.$group_0'.
Removing empty process `top.wb_dec.$group_23'.
Found and cleaned up 1 empty switch in `\top.wb_dec.$group_22'.
Removing empty process `top.wb_dec.$group_22'.
Found and cleaned up 1 empty switch in `\top.wb_dec.$group_21'.
Removing empty process `top.wb_dec.$group_21'.
Found and cleaned up 1 empty switch in `\top.wb_dec.$group_20'.
Removing empty process `top.wb_dec.$group_20'.
Found and cleaned up 1 empty switch in `\top.wb_dec.$group_19'.
Removing empty process `top.wb_dec.$group_19'.
Removing empty process `top.wb_dec.$group_18'.
Removing empty process `top.wb_dec.$group_17'.
Removing empty process `top.wb_dec.$group_16'.
Removing empty process `top.wb_dec.$group_15'.
Removing empty process `top.wb_dec.$group_14'.
Removing empty process `top.wb_dec.$group_13'.
Removing empty process `top.wb_dec.$group_12'.
Removing empty process `top.wb_dec.$group_11'.
Removing empty process `top.wb_dec.$group_10'.
Removing empty process `top.wb_dec.$group_9'.
Removing empty process `top.wb_dec.$group_8'.
Removing empty process `top.wb_dec.$group_7'.
Removing empty process `top.wb_dec.$group_6'.
Removing empty process `top.wb_dec.$group_5'.
Removing empty process `top.wb_dec.$group_4'.
Removing empty process `top.wb_dec.$group_3'.
Removing empty process `top.wb_dec.$group_2'.
Removing empty process `top.wb_dec.$group_1'.
Removing empty process `top.wb_dec.$group_0'.
Found and cleaned up 1 empty switch in `\top.wb_arb.$group_15'.
Removing empty process `top.wb_arb.$group_15'.
Found and cleaned up 1 empty switch in `\top.wb_arb.$group_14'.
Removing empty process `top.wb_arb.$group_14'.
Found and cleaned up 1 empty switch in `\top.wb_arb.$group_13'.
Removing empty process `top.wb_arb.$group_13'.
Found and cleaned up 1 empty switch in `\top.wb_arb.$group_12'.
Removing empty process `top.wb_arb.$group_12'.
Found and cleaned up 1 empty switch in `\top.wb_arb.$group_11'.
Removing empty process `top.wb_arb.$group_11'.
Found and cleaned up 1 empty switch in `\top.wb_arb.$group_10'.
Removing empty process `top.wb_arb.$group_10'.
Found and cleaned up 1 empty switch in `\top.wb_arb.$group_9'.
Removing empty process `top.wb_arb.$group_9'.
Found and cleaned up 1 empty switch in `\top.wb_arb.$group_8'.
Removing empty process `top.wb_arb.$group_8'.
Found and cleaned up 1 empty switch in `\top.wb_arb.$group_7'.
Removing empty process `top.wb_arb.$group_7'.
Found and cleaned up 1 empty switch in `\top.wb_arb.$group_6'.
Removing empty process `top.wb_arb.$group_6'.
Found and cleaned up 1 empty switch in `\top.wb_arb.$group_5'.
Removing empty process `top.wb_arb.$group_5'.
Found and cleaned up 1 empty switch in `\top.wb_arb.$group_4'.
Removing empty process `top.wb_arb.$group_4'.
Removing empty process `top.wb_arb.$group_3'.
Removing empty process `top.wb_arb.$group_2'.
Found and cleaned up 5 empty switches in `\top.wb_arb.$group_1'.
Removing empty process `top.wb_arb.$group_1'.
Removing empty process `top.wb_arb.$group_0'.
Removing empty process `top.serial.$group_17'.
Removing empty process `top.serial.$group_16'.
Removing empty process `top.serial.$group_15'.
Removing empty process `top.serial.$group_14'.
Removing empty process `top.serial.$group_13'.
Removing empty process `top.serial.$group_12'.
Removing empty process `top.serial.$group_11'.
Removing empty process `top.serial.$group_10'.
Removing empty process `top.serial.$group_9'.
Removing empty process `top.serial.$group_8'.
Removing empty process `top.serial.$group_7'.
Removing empty process `top.serial.$group_6'.
Removing empty process `top.serial.$group_5'.
Removing empty process `top.serial.$group_4'.
Removing empty process `top.serial.$group_3'.
Removing empty process `top.serial.$group_2'.
Removing empty process `top.serial.$group_1'.
Removing empty process `top.serial.$group_0'.
Removing empty process `top.serial.phy.$group_12'.
Removing empty process `top.serial.phy.$group_11'.
Removing empty process `top.serial.phy.$group_10'.
Removing empty process `top.serial.phy.$group_9'.
Removing empty process `top.serial.phy.$group_8'.
Removing empty process `top.serial.phy.$group_7'.
Removing empty process `top.serial.phy.$group_6'.
Removing empty process `top.serial.phy.$group_5'.
Removing empty process `top.serial.phy.$group_4'.
Removing empty process `top.serial.phy.$group_3'.
Removing empty process `top.serial.phy.$group_2'.
Removing empty process `top.serial.phy.$group_1'.
Removing empty process `top.serial.phy.$group_0'.
Found and cleaned up 5 empty switches in `\top.serial.phy.tx.$group_4'.
Removing empty process `top.serial.phy.tx.$group_4'.
Found and cleaned up 4 empty switches in `\top.serial.phy.tx.$group_3'.
Removing empty process `top.serial.phy.tx.$group_3'.
Found and cleaned up 4 empty switches in `\top.serial.phy.tx.$group_2'.
Removing empty process `top.serial.phy.tx.$group_2'.
Found and cleaned up 4 empty switches in `\top.serial.phy.tx.$group_5'.
Removing empty process `top.serial.phy.tx.$group_5'.
Found and cleaned up 1 empty switch in `\top.serial.phy.tx.$group_0'.
Removing empty process `top.serial.phy.tx.$group_0'.
Found and cleaned up 2 empty switches in `\top.serial.phy.rx.$group_6'.
Removing empty process `top.serial.phy.rx.$group_6'.
Found and cleaned up 4 empty switches in `\top.serial.phy.rx.$group_5'.
Removing empty process `top.serial.phy.rx.$group_5'.
Found and cleaned up 3 empty switches in `\top.serial.phy.rx.$group_4'.
Removing empty process `top.serial.phy.rx.$group_4'.
Found and cleaned up 3 empty switches in `\top.serial.phy.rx.$group_3'.
Removing empty process `top.serial.phy.rx.$group_3'.
Found and cleaned up 5 empty switches in `\top.serial.phy.rx.$group_2'.
Removing empty process `top.serial.phy.rx.$group_2'.
Found and cleaned up 4 empty switches in `\top.serial.phy.rx.$group_1'.
Removing empty process `top.serial.phy.rx.$group_1'.
Found and cleaned up 4 empty switches in `\top.serial.phy.rx.$group_0'.
Removing empty process `top.serial.phy.rx.$group_0'.
Removing empty process `top.serial.tx_fifo.$group_14'.
Found and cleaned up 2 empty switches in `\top.serial.tx_fifo.$group_13'.
Removing empty process `top.serial.tx_fifo.$group_13'.
Found and cleaned up 3 empty switches in `\top.serial.tx_fifo.$group_12'.
Removing empty process `top.serial.tx_fifo.$group_12'.
Found and cleaned up 2 empty switches in `\top.serial.tx_fifo.$group_11'.
Removing empty process `top.serial.tx_fifo.$group_11'.
Removing empty process `top.serial.tx_fifo.$group_10'.
Removing empty process `top.serial.tx_fifo.$group_9'.
Removing empty process `top.serial.tx_fifo.$group_8'.
Found and cleaned up 2 empty switches in `\top.serial.tx_fifo.$group_7'.
Removing empty process `top.serial.tx_fifo.$group_7'.
Removing empty process `top.serial.tx_fifo.$group_6'.
Removing empty process `top.serial.tx_fifo.$group_5'.
Removing empty process `top.serial.tx_fifo.$group_4'.
Removing empty process `top.serial.tx_fifo.$group_3'.
Removing empty process `top.serial.tx_fifo.$group_2'.
Removing empty process `top.serial.tx_fifo.$group_1'.
Removing empty process `top.serial.tx_fifo.$group_0'.
Removing empty process `top.serial.rx_fifo.$group_14'.
Found and cleaned up 2 empty switches in `\top.serial.rx_fifo.$group_13'.
Removing empty process `top.serial.rx_fifo.$group_13'.
Found and cleaned up 3 empty switches in `\top.serial.rx_fifo.$group_12'.
Removing empty process `top.serial.rx_fifo.$group_12'.
Found and cleaned up 2 empty switches in `\top.serial.rx_fifo.$group_11'.
Removing empty process `top.serial.rx_fifo.$group_11'.
Removing empty process `top.serial.rx_fifo.$group_10'.
Removing empty process `top.serial.rx_fifo.$group_9'.
Removing empty process `top.serial.rx_fifo.$group_8'.
Found and cleaned up 2 empty switches in `\top.serial.rx_fifo.$group_7'.
Removing empty process `top.serial.rx_fifo.$group_7'.
Removing empty process `top.serial.rx_fifo.$group_6'.
Removing empty process `top.serial.rx_fifo.$group_5'.
Removing empty process `top.serial.rx_fifo.$group_4'.
Removing empty process `top.serial.rx_fifo.$group_3'.
Removing empty process `top.serial.rx_fifo.$group_2'.
Removing empty process `top.serial.rx_fifo.$group_1'.
Removing empty process `top.serial.rx_fifo.$group_0'.
Removing empty process `top.serial.bridge.$group_4'.
Removing empty process `top.serial.bridge.$group_3'.
Removing empty process `top.serial.bridge.$group_2'.
Removing empty process `top.serial.bridge.$group_1'.
Removing empty process `top.serial.bridge.$group_0'.
Removing empty process `top.serial.bridge.tx__data.$group_1'.
Removing empty process `top.serial.bridge.tx__data.$group_0'.
Removing empty process `top.serial.bridge.tx__data.data.$group_0'.
Removing empty process `top.serial.bridge.tx__info.$group_1'.
Removing empty process `top.serial.bridge.tx__info.$group_0'.
Removing empty process `top.serial.bridge.tx__info.rdy.$group_0'.
Removing empty process `top.serial.bridge.rx__data.$group_1'.
Removing empty process `top.serial.bridge.rx__data.$group_0'.
Removing empty process `top.serial.bridge.rx__data.data.$group_0'.
Removing empty process `top.serial.bridge.rx__info.$group_4'.
Removing empty process `top.serial.bridge.rx__info.$group_3'.
Removing empty process `top.serial.bridge.rx__info.$group_2'.
Removing empty process `top.serial.bridge.rx__info.$group_1'.
Removing empty process `top.serial.bridge.rx__info.$group_0'.
Removing empty process `top.serial.bridge.rx__info.err__parity.$group_0'.
Removing empty process `top.serial.bridge.rx__info.err__frame.$group_0'.
Removing empty process `top.serial.bridge.rx__info.err__overflow.$group_0'.
Removing empty process `top.serial.bridge.rx__info.rdy.$group_0'.
Removing empty process `top.serial.bridge.ctrl.$group_3'.
Removing empty process `top.serial.bridge.ctrl.$group_2'.
Removing empty process `top.serial.bridge.ctrl.$group_1'.
Removing empty process `top.serial.bridge.ctrl.$group_0'.
Removing empty process `top.serial.bridge.ctrl.divisor.$group_2'.
Removing empty process `top.serial.bridge.ctrl.divisor.$group_1'.
Found and cleaned up 2 empty switches in `\top.serial.bridge.ctrl.divisor.$group_0'.
Removing empty process `top.serial.bridge.ctrl.divisor.$group_0'.
Found and cleaned up 2 empty switches in `\top.serial.bridge.mux.$group_13'.
Removing empty process `top.serial.bridge.mux.$group_13'.
Found and cleaned up 1 empty switch in `\top.serial.bridge.mux.$group_12'.
Removing empty process `top.serial.bridge.mux.$group_12'.
Removing empty process `top.serial.bridge.mux.$group_11'.
Found and cleaned up 2 empty switches in `\top.serial.bridge.mux.$group_10'.
Removing empty process `top.serial.bridge.mux.$group_10'.
Removing empty process `top.serial.bridge.mux.$group_9'.
Found and cleaned up 2 empty switches in `\top.serial.bridge.mux.$group_8'.
Removing empty process `top.serial.bridge.mux.$group_8'.
Removing empty process `top.serial.bridge.mux.$group_7'.
Found and cleaned up 2 empty switches in `\top.serial.bridge.mux.$group_6'.
Removing empty process `top.serial.bridge.mux.$group_6'.
Removing empty process `top.serial.bridge.mux.$group_5'.
Found and cleaned up 1 empty switch in `\top.serial.bridge.mux.$group_4'.
Removing empty process `top.serial.bridge.mux.$group_4'.
Found and cleaned up 1 empty switch in `\top.serial.bridge.mux.$group_3'.
Removing empty process `top.serial.bridge.mux.$group_3'.
Found and cleaned up 1 empty switch in `\top.serial.bridge.mux.$group_2'.
Removing empty process `top.serial.bridge.mux.$group_2'.
Found and cleaned up 1 empty switch in `\top.serial.bridge.mux.$group_1'.
Removing empty process `top.serial.bridge.mux.$group_1'.
Found and cleaned up 2 empty switches in `\top.serial.bridge.mux.$group_0'.
Removing empty process `top.serial.bridge.mux.$group_0'.
Found and cleaned up 3 empty switches in `\top.rom.$group_6'.
Removing empty process `top.rom.$group_6'.
Found and cleaned up 4 empty switches in `\top.rom.$group_5'.
Removing empty process `top.rom.$group_5'.
Found and cleaned up 2 empty switches in `\top.rom.$group_4'.
Removing empty process `top.rom.$group_4'.
Removing empty process `top.rom.$group_3'.
Removing empty process `top.rom.$group_2'.
Found and cleaned up 2 empty switches in `\top.rom.$group_1'.
Removing empty process `top.rom.$group_1'.
Removing empty process `top.rom.$group_0'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_304'.
Removing empty process `top.cpu.$group_304'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_303'.
Removing empty process `top.cpu.$group_303'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_302'.
Removing empty process `top.cpu.$group_302'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_301'.
Removing empty process `top.cpu.$group_301'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_300'.
Removing empty process `top.cpu.$group_300'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_299'.
Removing empty process `top.cpu.$group_299'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_298'.
Removing empty process `top.cpu.$group_298'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_297'.
Removing empty process `top.cpu.$group_297'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_296'.
Removing empty process `top.cpu.$group_296'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_295'.
Removing empty process `top.cpu.$group_295'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_294'.
Removing empty process `top.cpu.$group_294'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_293'.
Removing empty process `top.cpu.$group_293'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_292'.
Removing empty process `top.cpu.$group_292'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_291'.
Removing empty process `top.cpu.$group_291'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_290'.
Removing empty process `top.cpu.$group_290'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_289'.
Removing empty process `top.cpu.$group_289'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_288'.
Removing empty process `top.cpu.$group_288'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_287'.
Removing empty process `top.cpu.$group_287'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_286'.
Removing empty process `top.cpu.$group_286'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_285'.
Removing empty process `top.cpu.$group_285'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_284'.
Removing empty process `top.cpu.$group_284'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_283'.
Removing empty process `top.cpu.$group_283'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_282'.
Removing empty process `top.cpu.$group_282'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_281'.
Removing empty process `top.cpu.$group_281'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_280'.
Removing empty process `top.cpu.$group_280'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_279'.
Removing empty process `top.cpu.$group_279'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_278'.
Removing empty process `top.cpu.$group_278'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_277'.
Removing empty process `top.cpu.$group_277'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_276'.
Removing empty process `top.cpu.$group_276'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_275'.
Removing empty process `top.cpu.$group_275'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_274'.
Removing empty process `top.cpu.$group_274'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_273'.
Removing empty process `top.cpu.$group_273'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_272'.
Removing empty process `top.cpu.$group_272'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_271'.
Removing empty process `top.cpu.$group_271'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_270'.
Removing empty process `top.cpu.$group_270'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_269'.
Removing empty process `top.cpu.$group_269'.
Removing empty process `top.cpu.$group_268'.
Removing empty process `top.cpu.$group_267'.
Found and cleaned up 3 empty switches in `\top.cpu.$group_266'.
Removing empty process `top.cpu.$group_266'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_265'.
Removing empty process `top.cpu.$group_265'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_264'.
Removing empty process `top.cpu.$group_264'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_263'.
Removing empty process `top.cpu.$group_263'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_262'.
Removing empty process `top.cpu.$group_262'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_261'.
Removing empty process `top.cpu.$group_261'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_260'.
Removing empty process `top.cpu.$group_260'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_259'.
Removing empty process `top.cpu.$group_259'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_258'.
Removing empty process `top.cpu.$group_258'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_257'.
Removing empty process `top.cpu.$group_257'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_256'.
Removing empty process `top.cpu.$group_256'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_255'.
Removing empty process `top.cpu.$group_255'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_254'.
Removing empty process `top.cpu.$group_254'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_253'.
Removing empty process `top.cpu.$group_253'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_252'.
Removing empty process `top.cpu.$group_252'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_251'.
Removing empty process `top.cpu.$group_251'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_250'.
Removing empty process `top.cpu.$group_250'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_249'.
Removing empty process `top.cpu.$group_249'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_248'.
Removing empty process `top.cpu.$group_248'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_247'.
Removing empty process `top.cpu.$group_247'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_246'.
Removing empty process `top.cpu.$group_246'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_245'.
Removing empty process `top.cpu.$group_245'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_244'.
Removing empty process `top.cpu.$group_244'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_243'.
Removing empty process `top.cpu.$group_243'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_242'.
Removing empty process `top.cpu.$group_242'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_241'.
Removing empty process `top.cpu.$group_241'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_240'.
Removing empty process `top.cpu.$group_240'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_239'.
Removing empty process `top.cpu.$group_239'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_238'.
Removing empty process `top.cpu.$group_238'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_237'.
Removing empty process `top.cpu.$group_237'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_236'.
Removing empty process `top.cpu.$group_236'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_235'.
Removing empty process `top.cpu.$group_235'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_234'.
Removing empty process `top.cpu.$group_234'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_233'.
Removing empty process `top.cpu.$group_233'.
Removing empty process `top.cpu.$group_232'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_231'.
Removing empty process `top.cpu.$group_231'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_230'.
Removing empty process `top.cpu.$group_230'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_229'.
Removing empty process `top.cpu.$group_229'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_228'.
Removing empty process `top.cpu.$group_228'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_227'.
Removing empty process `top.cpu.$group_227'.
Removing empty process `top.cpu.$group_226'.
Removing empty process `top.cpu.$group_225'.
Removing empty process `top.cpu.$group_224'.
Removing empty process `top.cpu.$group_223'.
Removing empty process `top.cpu.$group_222'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_221'.
Removing empty process `top.cpu.$group_221'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_220'.
Removing empty process `top.cpu.$group_220'.
Removing empty process `top.cpu.$group_219'.
Removing empty process `top.cpu.$group_218'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_217'.
Removing empty process `top.cpu.$group_217'.
Removing empty process `top.cpu.$group_216'.
Removing empty process `top.cpu.$group_215'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_214'.
Removing empty process `top.cpu.$group_214'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_213'.
Removing empty process `top.cpu.$group_213'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_212'.
Removing empty process `top.cpu.$group_212'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_211'.
Removing empty process `top.cpu.$group_211'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_210'.
Removing empty process `top.cpu.$group_210'.
Removing empty process `top.cpu.$group_209'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_208'.
Removing empty process `top.cpu.$group_208'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_207'.
Removing empty process `top.cpu.$group_207'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_206'.
Removing empty process `top.cpu.$group_206'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_205'.
Removing empty process `top.cpu.$group_205'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_204'.
Removing empty process `top.cpu.$group_204'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_203'.
Removing empty process `top.cpu.$group_203'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_202'.
Removing empty process `top.cpu.$group_202'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_201'.
Removing empty process `top.cpu.$group_201'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_200'.
Removing empty process `top.cpu.$group_200'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_199'.
Removing empty process `top.cpu.$group_199'.
Removing empty process `top.cpu.$group_198'.
Removing empty process `top.cpu.$group_197'.
Removing empty process `top.cpu.$group_196'.
Removing empty process `top.cpu.$group_195'.
Removing empty process `top.cpu.$group_194'.
Removing empty process `top.cpu.$group_193'.
Removing empty process `top.cpu.$group_192'.
Removing empty process `top.cpu.$group_191'.
Removing empty process `top.cpu.$group_190'.
Removing empty process `top.cpu.$group_189'.
Removing empty process `top.cpu.$group_188'.
Removing empty process `top.cpu.$group_187'.
Removing empty process `top.cpu.$group_186'.
Removing empty process `top.cpu.$group_185'.
Removing empty process `top.cpu.$group_184'.
Removing empty process `top.cpu.$group_183'.
Removing empty process `top.cpu.$group_182'.
Removing empty process `top.cpu.$group_181'.
Removing empty process `top.cpu.$group_180'.
Removing empty process `top.cpu.$group_179'.
Removing empty process `top.cpu.$group_178'.
Removing empty process `top.cpu.$group_177'.
Removing empty process `top.cpu.$group_176'.
Removing empty process `top.cpu.$group_175'.
Removing empty process `top.cpu.$group_174'.
Removing empty process `top.cpu.$group_173'.
Removing empty process `top.cpu.$group_172'.
Removing empty process `top.cpu.$group_171'.
Removing empty process `top.cpu.$group_170'.
Removing empty process `top.cpu.$group_169'.
Removing empty process `top.cpu.$group_168'.
Removing empty process `top.cpu.$group_167'.
Removing empty process `top.cpu.$group_166'.
Removing empty process `top.cpu.$group_165'.
Removing empty process `top.cpu.$group_164'.
Removing empty process `top.cpu.$group_163'.
Removing empty process `top.cpu.$group_162'.
Removing empty process `top.cpu.$group_161'.
Removing empty process `top.cpu.$group_160'.
Removing empty process `top.cpu.$group_159'.
Removing empty process `top.cpu.$group_158'.
Removing empty process `top.cpu.$group_157'.
Removing empty process `top.cpu.$group_156'.
Removing empty process `top.cpu.$group_155'.
Removing empty process `top.cpu.$group_154'.
Removing empty process `top.cpu.$group_153'.
Removing empty process `top.cpu.$group_152'.
Removing empty process `top.cpu.$group_151'.
Removing empty process `top.cpu.$group_150'.
Removing empty process `top.cpu.$group_149'.
Removing empty process `top.cpu.$group_148'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_147'.
Removing empty process `top.cpu.$group_147'.
Removing empty process `top.cpu.$group_146'.
Removing empty process `top.cpu.$group_145'.
Removing empty process `top.cpu.$group_144'.
Removing empty process `top.cpu.$group_143'.
Removing empty process `top.cpu.$group_142'.
Removing empty process `top.cpu.$group_141'.
Removing empty process `top.cpu.$group_140'.
Removing empty process `top.cpu.$group_139'.
Removing empty process `top.cpu.$group_138'.
Removing empty process `top.cpu.$group_137'.
Removing empty process `top.cpu.$group_136'.
Removing empty process `top.cpu.$group_135'.
Removing empty process `top.cpu.$group_134'.
Found and cleaned up 2 empty switches in `\top.cpu.$group_133'.
Removing empty process `top.cpu.$group_133'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_132'.
Removing empty process `top.cpu.$group_132'.
Found and cleaned up 1 empty switch in `\top.cpu.$group_131'.
Removing empty process `top.cpu.$group_131'.
Removing empty process `top.cpu.$group_130'.
Removing empty process `top.cpu.$group_129'.
Removing empty process `top.cpu.$group_128'.
Removing empty process `top.cpu.$group_127'.
Removing empty process `top.cpu.$group_126'.
Removing empty process `top.cpu.$group_125'.
Removing empty process `top.cpu.$group_124'.
Removing empty process `top.cpu.$group_123'.
Removing empty process `top.cpu.$group_122'.
Removing empty process `top.cpu.$group_121'.
Removing empty process `top.cpu.$group_120'.
Removing empty process `top.cpu.$group_119'.
Removing empty process `top.cpu.$group_118'.
Removing empty process `top.cpu.$group_117'.
Removing empty process `top.cpu.$group_116'.
Removing empty process `top.cpu.$group_115'.
Removing empty process `top.cpu.$group_114'.
Removing empty process `top.cpu.$group_113'.
Removing empty process `top.cpu.$group_112'.
Removing empty process `top.cpu.$group_111'.
Removing empty process `top.cpu.$group_110'.
Removing empty process `top.cpu.$group_109'.
Removing empty process `top.cpu.$group_108'.
Removing empty process `top.cpu.$group_107'.
Removing empty process `top.cpu.$group_106'.
Removing empty process `top.cpu.$group_105'.
Removing empty process `top.cpu.$group_104'.
Removing empty process `top.cpu.$group_103'.
Removing empty process `top.cpu.$group_102'.
Removing empty process `top.cpu.$group_101'.
Removing empty process `top.cpu.$group_100'.
Removing empty process `top.cpu.$group_99'.
Removing empty process `top.cpu.$group_98'.
Removing empty process `top.cpu.$group_97'.
Removing empty process `top.cpu.$group_96'.
Removing empty process `top.cpu.$group_95'.
Removing empty process `top.cpu.$group_94'.
Removing empty process `top.cpu.$group_93'.
Removing empty process `top.cpu.$group_92'.
Removing empty process `top.cpu.$group_91'.
Removing empty process `top.cpu.$group_90'.
Removing empty process `top.cpu.$group_89'.
Removing empty process `top.cpu.$group_88'.
Removing empty process `top.cpu.$group_87'.
Removing empty process `top.cpu.$group_86'.
Removing empty process `top.cpu.$group_85'.
Removing empty process `top.cpu.$group_84'.
Removing empty process `top.cpu.$group_83'.
Removing empty process `top.cpu.$group_82'.
Removing empty process `top.cpu.$group_81'.
Removing empty process `top.cpu.$group_80'.
Removing empty process `top.cpu.$group_79'.
Removing empty process `top.cpu.$group_78'.
Removing empty process `top.cpu.$group_77'.
Removing empty process `top.cpu.$group_76'.
Removing empty process `top.cpu.$group_75'.
Removing empty process `top.cpu.$group_74'.
Removing empty process `top.cpu.$group_73'.
Removing empty process `top.cpu.$group_72'.
Removing empty process `top.cpu.$group_71'.
Removing empty process `top.cpu.$group_70'.
Removing empty process `top.cpu.$group_69'.
Removing empty process `top.cpu.$group_68'.
Removing empty process `top.cpu.$group_67'.
Removing empty process `top.cpu.$group_66'.
Removing empty process `top.cpu.$group_65'.
Removing empty process `top.cpu.$group_64'.
Removing empty process `top.cpu.$group_63'.
Removing empty process `top.cpu.$group_62'.
Removing empty process `top.cpu.$group_61'.
Removing empty process `top.cpu.$group_60'.
Removing empty process `top.cpu.$group_59'.
Removing empty process `top.cpu.$group_58'.
Removing empty process `top.cpu.$group_57'.
Removing empty process `top.cpu.$group_56'.
Removing empty process `top.cpu.$group_55'.
Removing empty process `top.cpu.$group_54'.
Removing empty process `top.cpu.$group_53'.
Removing empty process `top.cpu.$group_52'.
Removing empty process `top.cpu.$group_51'.
Removing empty process `top.cpu.$group_50'.
Removing empty process `top.cpu.$group_49'.
Removing empty process `top.cpu.$group_48'.
Removing empty process `top.cpu.$group_47'.
Removing empty process `top.cpu.$group_46'.
Removing empty process `top.cpu.$group_45'.
Removing empty process `top.cpu.$group_44'.
Removing empty process `top.cpu.$group_43'.
Removing empty process `top.cpu.$group_42'.
Removing empty process `top.cpu.$group_41'.
Removing empty process `top.cpu.$group_40'.
Removing empty process `top.cpu.$group_39'.
Removing empty process `top.cpu.$group_38'.
Removing empty process `top.cpu.$group_37'.
Removing empty process `top.cpu.$group_36'.
Removing empty process `top.cpu.$group_35'.
Removing empty process `top.cpu.$group_34'.
Removing empty process `top.cpu.$group_33'.
Removing empty process `top.cpu.$group_32'.
Removing empty process `top.cpu.$group_31'.
Removing empty process `top.cpu.$group_30'.
Removing empty process `top.cpu.$group_29'.
Removing empty process `top.cpu.$group_28'.
Removing empty process `top.cpu.$group_27'.
Removing empty process `top.cpu.$group_26'.
Removing empty process `top.cpu.$group_25'.
Removing empty process `top.cpu.$group_24'.
Removing empty process `top.cpu.$group_23'.
Removing empty process `top.cpu.$group_22'.
Removing empty process `top.cpu.$group_21'.
Removing empty process `top.cpu.$group_20'.
Removing empty process `top.cpu.$group_19'.
Removing empty process `top.cpu.$group_18'.
Removing empty process `top.cpu.$group_17'.
Removing empty process `top.cpu.$group_16'.
Removing empty process `top.cpu.$group_15'.
Removing empty process `top.cpu.$group_14'.
Removing empty process `top.cpu.$group_13'.
Removing empty process `top.cpu.$group_12'.
Removing empty process `top.cpu.$group_11'.
Removing empty process `top.cpu.$group_10'.
Removing empty process `top.cpu.$group_9'.
Removing empty process `top.cpu.$group_8'.
Removing empty process `top.cpu.$group_7'.
Removing empty process `top.cpu.$group_6'.
Removing empty process `top.cpu.$group_5'.
Removing empty process `top.cpu.$group_4'.
Removing empty process `top.cpu.$group_3'.
Removing empty process `top.cpu.$group_2'.
Removing empty process `top.cpu.$group_1'.
Removing empty process `top.cpu.$group_0'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_82'.
Removing empty process `top.cpu.csrf.$group_82'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_81'.
Removing empty process `top.cpu.csrf.$group_81'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_80'.
Removing empty process `top.cpu.csrf.$group_80'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_79'.
Removing empty process `top.cpu.csrf.$group_79'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_66'.
Removing empty process `top.cpu.csrf.$group_66'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_65'.
Removing empty process `top.cpu.csrf.$group_65'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_64'.
Removing empty process `top.cpu.csrf.$group_64'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_63'.
Removing empty process `top.cpu.csrf.$group_63'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_61'.
Removing empty process `top.cpu.csrf.$group_61'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_60'.
Removing empty process `top.cpu.csrf.$group_60'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_58'.
Removing empty process `top.cpu.csrf.$group_58'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_57'.
Removing empty process `top.cpu.csrf.$group_57'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_56'.
Removing empty process `top.cpu.csrf.$group_56'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_55'.
Removing empty process `top.cpu.csrf.$group_55'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_53'.
Removing empty process `top.cpu.csrf.$group_53'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_52'.
Removing empty process `top.cpu.csrf.$group_52'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_39'.
Removing empty process `top.cpu.csrf.$group_39'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_38'.
Removing empty process `top.cpu.csrf.$group_38'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_35'.
Removing empty process `top.cpu.csrf.$group_35'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_34'.
Removing empty process `top.cpu.csrf.$group_34'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_13'.
Removing empty process `top.cpu.csrf.$group_13'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_12'.
Removing empty process `top.cpu.csrf.$group_12'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_11'.
Removing empty process `top.cpu.csrf.$group_11'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_10'.
Removing empty process `top.cpu.csrf.$group_10'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_9'.
Removing empty process `top.cpu.csrf.$group_9'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_8'.
Removing empty process `top.cpu.csrf.$group_8'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_7'.
Removing empty process `top.cpu.csrf.$group_7'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_6'.
Removing empty process `top.cpu.csrf.$group_6'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_5'.
Removing empty process `top.cpu.csrf.$group_5'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_4'.
Removing empty process `top.cpu.csrf.$group_4'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_3'.
Removing empty process `top.cpu.csrf.$group_3'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_2'.
Removing empty process `top.cpu.csrf.$group_2'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_1'.
Removing empty process `top.cpu.csrf.$group_1'.
Found and cleaned up 1 empty switch in `\top.cpu.csrf.$group_0'.
Removing empty process `top.cpu.csrf.$group_0'.
Found and cleaned up 1 empty switch in `\top.cpu.gprf.mem.$group_11'.
Removing empty process `top.cpu.gprf.mem.$group_11'.
Found and cleaned up 1 empty switch in `\top.cpu.gprf.mem.$group_10'.
Removing empty process `top.cpu.gprf.mem.$group_10'.
Found and cleaned up 1 empty switch in `\top.cpu.gprf.mem.$group_9'.
Removing empty process `top.cpu.gprf.mem.$group_9'.
Found and cleaned up 1 empty switch in `\top.cpu.gprf.mem.$group_8'.
Removing empty process `top.cpu.gprf.mem.$group_8'.
Found and cleaned up 1 empty switch in `\top.cpu.gprf.mem.$group_7'.
Removing empty process `top.cpu.gprf.mem.$group_7'.
Removing empty process `top.cpu.gprf.mem.$group_6'.
Removing empty process `top.cpu.gprf.mem.$group_5'.
Removing empty process `top.cpu.gprf.mem.$group_4'.
Removing empty process `top.cpu.gprf.mem.$group_3'.
Removing empty process `top.cpu.gprf.mem.$group_2'.
Removing empty process `top.cpu.gprf.mem.$group_1'.
Removing empty process `top.cpu.gprf.mem.$group_0'.
Found and cleaned up 1 empty switch in `\top.cpu.loadstore.$group_11'.
Removing empty process `top.cpu.loadstore.$group_11'.
Removing empty process `top.cpu.loadstore.$group_10'.
Found and cleaned up 2 empty switches in `\top.cpu.loadstore.$group_9'.
Removing empty process `top.cpu.loadstore.$group_9'.
Found and cleaned up 2 empty switches in `\top.cpu.loadstore.$group_8'.
Removing empty process `top.cpu.loadstore.$group_8'.
Found and cleaned up 2 empty switches in `\top.cpu.loadstore.$group_7'.
Removing empty process `top.cpu.loadstore.$group_7'.
Found and cleaned up 2 empty switches in `\top.cpu.loadstore.$group_6'.
Removing empty process `top.cpu.loadstore.$group_6'.
Found and cleaned up 2 empty switches in `\top.cpu.loadstore.$group_5'.
Removing empty process `top.cpu.loadstore.$group_5'.
Found and cleaned up 2 empty switches in `\top.cpu.loadstore.$group_4'.
Removing empty process `top.cpu.loadstore.$group_4'.
Found and cleaned up 2 empty switches in `\top.cpu.loadstore.$group_3'.
Removing empty process `top.cpu.loadstore.$group_3'.
Found and cleaned up 3 empty switches in `\top.cpu.loadstore.$group_2'.
Removing empty process `top.cpu.loadstore.$group_2'.
Found and cleaned up 3 empty switches in `\top.cpu.loadstore.$group_1'.
Removing empty process `top.cpu.loadstore.$group_1'.
Found and cleaned up 3 empty switches in `\top.cpu.loadstore.$group_0'.
Removing empty process `top.cpu.loadstore.$group_0'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.$group_44'.
Removing empty process `top.cpu.fetch.$group_44'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.$group_43'.
Removing empty process `top.cpu.fetch.$group_43'.
Found and cleaned up 2 empty switches in `\top.cpu.fetch.$group_42'.
Removing empty process `top.cpu.fetch.$group_42'.
Found and cleaned up 2 empty switches in `\top.cpu.fetch.$group_41'.
Removing empty process `top.cpu.fetch.$group_41'.
Removing empty process `top.cpu.fetch.$group_40'.
Removing empty process `top.cpu.fetch.$group_39'.
Found and cleaned up 2 empty switches in `\top.cpu.fetch.$group_38'.
Removing empty process `top.cpu.fetch.$group_38'.
Found and cleaned up 3 empty switches in `\top.cpu.fetch.$group_37'.
Removing empty process `top.cpu.fetch.$group_37'.
Found and cleaned up 3 empty switches in `\top.cpu.fetch.$group_36'.
Removing empty process `top.cpu.fetch.$group_36'.
Found and cleaned up 3 empty switches in `\top.cpu.fetch.$group_35'.
Removing empty process `top.cpu.fetch.$group_35'.
Removing empty process `top.cpu.fetch.$group_34'.
Removing empty process `top.cpu.fetch.$group_33'.
Removing empty process `top.cpu.fetch.$group_32'.
Removing empty process `top.cpu.fetch.$group_31'.
Removing empty process `top.cpu.fetch.$group_30'.
Removing empty process `top.cpu.fetch.$group_29'.
Removing empty process `top.cpu.fetch.$group_28'.
Removing empty process `top.cpu.fetch.$group_27'.
Removing empty process `top.cpu.fetch.$group_26'.
Removing empty process `top.cpu.fetch.$group_25'.
Removing empty process `top.cpu.fetch.$group_24'.
Removing empty process `top.cpu.fetch.$group_23'.
Removing empty process `top.cpu.fetch.$group_22'.
Removing empty process `top.cpu.fetch.$group_21'.
Removing empty process `top.cpu.fetch.$group_20'.
Removing empty process `top.cpu.fetch.$group_19'.
Removing empty process `top.cpu.fetch.$group_18'.
Removing empty process `top.cpu.fetch.$group_17'.
Removing empty process `top.cpu.fetch.$group_16'.
Removing empty process `top.cpu.fetch.$group_15'.
Removing empty process `top.cpu.fetch.$group_14'.
Removing empty process `top.cpu.fetch.$group_13'.
Removing empty process `top.cpu.fetch.$group_12'.
Removing empty process `top.cpu.fetch.$group_11'.
Removing empty process `top.cpu.fetch.$group_8'.
Removing empty process `top.cpu.fetch.$group_7'.
Removing empty process `top.cpu.fetch.$group_6'.
Removing empty process `top.cpu.fetch.$group_3'.
Found and cleaned up 2 empty switches in `\top.cpu.fetch.$group_2'.
Removing empty process `top.cpu.fetch.$group_2'.
Found and cleaned up 2 empty switches in `\top.cpu.fetch.$group_1'.
Removing empty process `top.cpu.fetch.$group_1'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.$group_0'.
Removing empty process `top.cpu.fetch.$group_0'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.ibus_arbiter.$group_13'.
Removing empty process `top.cpu.fetch.ibus_arbiter.$group_13'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.ibus_arbiter.$group_11'.
Removing empty process `top.cpu.fetch.ibus_arbiter.$group_11'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.ibus_arbiter.$group_10'.
Removing empty process `top.cpu.fetch.ibus_arbiter.$group_10'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.ibus_arbiter.$group_9'.
Removing empty process `top.cpu.fetch.ibus_arbiter.$group_9'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.ibus_arbiter.$group_8'.
Removing empty process `top.cpu.fetch.ibus_arbiter.$group_8'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.ibus_arbiter.$group_7'.
Removing empty process `top.cpu.fetch.ibus_arbiter.$group_7'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.ibus_arbiter.$group_6'.
Removing empty process `top.cpu.fetch.ibus_arbiter.$group_6'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.ibus_arbiter.$group_5'.
Removing empty process `top.cpu.fetch.ibus_arbiter.$group_5'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.ibus_arbiter.$group_4'.
Removing empty process `top.cpu.fetch.ibus_arbiter.$group_4'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.ibus_arbiter.$group_3'.
Removing empty process `top.cpu.fetch.ibus_arbiter.$group_3'.
Found and cleaned up 2 empty switches in `\top.cpu.fetch.ibus_arbiter.$group_2'.
Removing empty process `top.cpu.fetch.ibus_arbiter.$group_2'.
Removing empty process `top.cpu.fetch.ibus_arbiter.$group_1'.
Removing empty process `top.cpu.fetch.ibus_arbiter.$group_0'.
Removing empty process `top.cpu.fetch.ibus_arbiter.bus_pe.$group_1'.
Found and cleaned up 2 empty switches in `\top.cpu.fetch.ibus_arbiter.bus_pe.$group_0'.
Removing empty process `top.cpu.fetch.ibus_arbiter.bus_pe.$group_0'.
Removing empty process `top.cpu.fetch.icache.$group_24'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.icache.$group_23'.
Removing empty process `top.cpu.fetch.icache.$group_23'.
Removing empty process `top.cpu.fetch.icache.$group_22'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.icache.$group_21'.
Removing empty process `top.cpu.fetch.icache.$group_21'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.icache.$group_20'.
Removing empty process `top.cpu.fetch.icache.$group_20'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.icache.$group_19'.
Removing empty process `top.cpu.fetch.icache.$group_19'.
Removing empty process `top.cpu.fetch.icache.$group_18'.
Removing empty process `top.cpu.fetch.icache.$group_16'.
Removing empty process `top.cpu.fetch.icache.$group_15'.
Removing empty process `top.cpu.fetch.icache.$group_14'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.icache.$group_13'.
Removing empty process `top.cpu.fetch.icache.$group_13'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.icache.$group_12'.
Removing empty process `top.cpu.fetch.icache.$group_12'.
Found and cleaned up 4 empty switches in `\top.cpu.fetch.icache.$group_11'.
Removing empty process `top.cpu.fetch.icache.$group_11'.
Found and cleaned up 6 empty switches in `\top.cpu.fetch.icache.$group_10'.
Removing empty process `top.cpu.fetch.icache.$group_10'.
Found and cleaned up 6 empty switches in `\top.cpu.fetch.icache.$group_7'.
Removing empty process `top.cpu.fetch.icache.$group_7'.
Found and cleaned up 6 empty switches in `\top.cpu.fetch.icache.$group_6'.
Removing empty process `top.cpu.fetch.icache.$group_6'.
Found and cleaned up 5 empty switches in `\top.cpu.fetch.icache.$group_5'.
Removing empty process `top.cpu.fetch.icache.$group_5'.
Found and cleaned up 4 empty switches in `\top.cpu.fetch.icache.$group_4'.
Removing empty process `top.cpu.fetch.icache.$group_4'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.icache.$group_3'.
Removing empty process `top.cpu.fetch.icache.$group_3'.
Removing empty process `top.cpu.fetch.icache.$group_2'.
Removing empty process `top.cpu.fetch.icache.$group_1'.
Removing empty process `top.cpu.fetch.icache.$group_0'.
Found and cleaned up 4 empty switches in `\top.cpu.fetch.icache.dat_mem_0.$group_8'.
Removing empty process `top.cpu.fetch.icache.dat_mem_0.$group_8'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.icache.dat_mem_0.$group_7'.
Removing empty process `top.cpu.fetch.icache.dat_mem_0.$group_7'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.icache.dat_mem_0.$group_6'.
Removing empty process `top.cpu.fetch.icache.dat_mem_0.$group_6'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.icache.dat_mem_0.$group_5'.
Removing empty process `top.cpu.fetch.icache.dat_mem_0.$group_5'.
Removing empty process `top.cpu.fetch.icache.dat_mem_0.$group_4'.
Removing empty process `top.cpu.fetch.icache.dat_mem_0.$group_3'.
Removing empty process `top.cpu.fetch.icache.dat_mem_0.$group_2'.
Removing empty process `top.cpu.fetch.icache.dat_mem_0.$group_1'.
Removing empty process `top.cpu.fetch.icache.dat_mem_0.$group_0'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.icache.tag_mem_0.$group_8'.
Removing empty process `top.cpu.fetch.icache.tag_mem_0.$group_8'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.icache.tag_mem_0.$group_7'.
Removing empty process `top.cpu.fetch.icache.tag_mem_0.$group_7'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.icache.tag_mem_0.$group_6'.
Removing empty process `top.cpu.fetch.icache.tag_mem_0.$group_6'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.icache.tag_mem_0.$group_5'.
Removing empty process `top.cpu.fetch.icache.tag_mem_0.$group_5'.
Removing empty process `top.cpu.fetch.icache.tag_mem_0.$group_4'.
Removing empty process `top.cpu.fetch.icache.tag_mem_0.$group_3'.
Removing empty process `top.cpu.fetch.icache.tag_mem_0.$group_2'.
Removing empty process `top.cpu.fetch.icache.tag_mem_0.$group_1'.
Removing empty process `top.cpu.fetch.icache.tag_mem_0.$group_0'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.icache.way_hit.$group_1'.
Removing empty process `top.cpu.fetch.icache.way_hit.$group_1'.
Found and cleaned up 1 empty switch in `\top.cpu.fetch.icache.way_hit.$group_0'.
Removing empty process `top.cpu.fetch.icache.way_hit.$group_0'.
Removing empty process `top.cpu.shifter.$group_4'.
Found and cleaned up 2 empty switches in `\top.cpu.shifter.$group_3'.
Removing empty process `top.cpu.shifter.$group_3'.
Found and cleaned up 2 empty switches in `\top.cpu.shifter.$group_2'.
Removing empty process `top.cpu.shifter.$group_2'.
Removing empty process `top.cpu.shifter.$group_1'.
Removing empty process `top.cpu.shifter.$group_0'.
Found and cleaned up 1 empty switch in `\top.cpu.predict.$group_2'.
Removing empty process `top.cpu.predict.$group_2'.
Removing empty process `top.cpu.predict.$group_1'.
Removing empty process `top.cpu.predict.$group_0'.
Found and cleaned up 1 empty switch in `\top.cpu.logic.$group_0'.
Removing empty process `top.cpu.logic.$group_0'.
Removing empty process `top.cpu.exception.$group_62'.
Removing empty process `top.cpu.exception.$group_61'.
Removing empty process `top.cpu.exception.$group_60'.
Found and cleaned up 3 empty switches in `\top.cpu.exception.$group_59'.
Removing empty process `top.cpu.exception.$group_59'.
Found and cleaned up 2 empty switches in `\top.cpu.exception.$group_58'.
Removing empty process `top.cpu.exception.$group_58'.
Found and cleaned up 5 empty switches in `\top.cpu.exception.$group_45'.
Removing empty process `top.cpu.exception.$group_45'.
Found and cleaned up 6 empty switches in `\top.cpu.exception.$group_44'.
Removing empty process `top.cpu.exception.$group_44'.
Found and cleaned up 5 empty switches in `\top.cpu.exception.$group_42'.
Removing empty process `top.cpu.exception.$group_42'.
Found and cleaned up 4 empty switches in `\top.cpu.exception.$group_40'.
Removing empty process `top.cpu.exception.$group_40'.
Found and cleaned up 2 empty switches in `\top.cpu.exception.$group_39'.
Removing empty process `top.cpu.exception.$group_39'.
Found and cleaned up 2 empty switches in `\top.cpu.exception.$group_37'.
Removing empty process `top.cpu.exception.$group_37'.
Found and cleaned up 2 empty switches in `\top.cpu.exception.$group_24'.
Removing empty process `top.cpu.exception.$group_24'.
Found and cleaned up 2 empty switches in `\top.cpu.exception.$group_21'.
Removing empty process `top.cpu.exception.$group_21'.
Found and cleaned up 4 empty switches in `\top.cpu.exception.$group_0'.
Removing empty process `top.cpu.exception.$group_0'.
Removing empty process `top.cpu.exception.interrupt_pe.$group_1'.
Found and cleaned up 16 empty switches in `\top.cpu.exception.interrupt_pe.$group_0'.
Removing empty process `top.cpu.exception.interrupt_pe.$group_0'.
Removing empty process `top.cpu.exception.trap_pe.$group_1'.
Found and cleaned up 16 empty switches in `\top.cpu.exception.trap_pe.$group_0'.
Removing empty process `top.cpu.exception.trap_pe.$group_0'.
Removing empty process `top.cpu.decoder.$group_40'.
Removing empty process `top.cpu.decoder.$group_39'.
Removing empty process `top.cpu.decoder.$group_38'.
Removing empty process `top.cpu.decoder.$group_37'.
Removing empty process `top.cpu.decoder.$group_36'.
Removing empty process `top.cpu.decoder.$group_35'.
Removing empty process `top.cpu.decoder.$group_34'.
Removing empty process `top.cpu.decoder.$group_33'.
Removing empty process `top.cpu.decoder.$group_32'.
Removing empty process `top.cpu.decoder.$group_31'.
Removing empty process `top.cpu.decoder.$group_30'.
Removing empty process `top.cpu.decoder.$group_29'.
Removing empty process `top.cpu.decoder.$group_28'.
Removing empty process `top.cpu.decoder.$group_27'.
Removing empty process `top.cpu.decoder.$group_26'.
Removing empty process `top.cpu.decoder.$group_25'.
Removing empty process `top.cpu.decoder.$group_24'.
Removing empty process `top.cpu.decoder.$group_23'.
Removing empty process `top.cpu.decoder.$group_22'.
Removing empty process `top.cpu.decoder.$group_21'.
Removing empty process `top.cpu.decoder.$group_20'.
Removing empty process `top.cpu.decoder.$group_19'.
Removing empty process `top.cpu.decoder.$group_18'.
Removing empty process `top.cpu.decoder.$group_17'.
Removing empty process `top.cpu.decoder.$group_16'.
Removing empty process `top.cpu.decoder.$group_15'.
Removing empty process `top.cpu.decoder.$group_14'.
Removing empty process `top.cpu.decoder.$group_13'.
Removing empty process `top.cpu.decoder.$group_12'.
Removing empty process `top.cpu.decoder.$group_11'.
Found and cleaned up 1 empty switch in `\top.cpu.decoder.$group_10'.
Removing empty process `top.cpu.decoder.$group_10'.
Found and cleaned up 1 empty switch in `\top.cpu.decoder.$group_9'.
Removing empty process `top.cpu.decoder.$group_9'.
Removing empty process `top.cpu.decoder.$group_8'.
Removing empty process `top.cpu.decoder.$group_7'.
Removing empty process `top.cpu.decoder.$group_6'.
Removing empty process `top.cpu.decoder.$group_5'.
Removing empty process `top.cpu.decoder.$group_4'.
Removing empty process `top.cpu.decoder.$group_3'.
Removing empty process `top.cpu.decoder.$group_2'.
Removing empty process `top.cpu.decoder.$group_1'.
Removing empty process `top.cpu.decoder.$group_0'.
Found and cleaned up 1 empty switch in `\top.cpu.compare.$group_0'.
Removing empty process `top.cpu.compare.$group_0'.
Found and cleaned up 1 empty switch in `\top.cpu.adder.$group_9'.
Removing empty process `top.cpu.adder.$group_9'.
Found and cleaned up 1 empty switch in `\top.cpu.adder.$group_8'.
Removing empty process `top.cpu.adder.$group_8'.
Found and cleaned up 1 empty switch in `\top.cpu.adder.$group_7'.
Removing empty process `top.cpu.adder.$group_7'.
Removing empty process `top.cpu.adder.$group_6'.
Removing empty process `top.cpu.adder.$group_4'.
Removing empty process `top.cpu.adder.$group_3'.
Removing empty process `top.cpu.adder.$group_1'.
Found and cleaned up 2 empty switches in `\top.cpu.adder.$group_0'.
Removing empty process `top.cpu.adder.$group_0'.
Found and cleaned up 1 empty switch in `\top.cpu.data_sel.$group_5'.
Removing empty process `top.cpu.data_sel.$group_5'.
Removing empty process `top.cpu.data_sel.$group_4'.
Removing empty process `top.cpu.data_sel.$group_3'.
Found and cleaned up 1 empty switch in `\top.cpu.data_sel.$group_2'.
Removing empty process `top.cpu.data_sel.$group_2'.
Found and cleaned up 1 empty switch in `\top.cpu.data_sel.$group_1'.
Removing empty process `top.cpu.data_sel.$group_1'.
Found and cleaned up 1 empty switch in `\top.cpu.data_sel.$group_0'.
Removing empty process `top.cpu.data_sel.$group_0'.
Removing empty process `top.cpu.pc_sel.$group_3'.
Found and cleaned up 1 empty switch in `\top.cpu.pc_sel.$group_2'.
Removing empty process `top.cpu.pc_sel.$group_2'.
Found and cleaned up 1 empty switch in `\top.cpu.pc_sel.$group_1'.
Removing empty process `top.cpu.pc_sel.$group_1'.
Found and cleaned up 1 empty switch in `\top.cpu.pc_sel.$group_0'.
Removing empty process `top.cpu.pc_sel.$group_0'.
Removing empty process `top.cpu.w.$group_2'.
Removing empty process `top.cpu.w.$group_1'.
Removing empty process `top.cpu.w.$group_0'.
Removing empty process `top.cpu.m.$group_5'.
Removing empty process `top.cpu.m.$group_4'.
Removing empty process `top.cpu.m.$group_3'.
Found and cleaned up 2 empty switches in `\top.cpu.m.$group_2'.
Removing empty process `top.cpu.m.$group_2'.
Removing empty process `top.cpu.m.$group_1'.
Removing empty process `top.cpu.m.$group_0'.
Removing empty process `top.cpu.x.$group_5'.
Removing empty process `top.cpu.x.$group_4'.
Removing empty process `top.cpu.x.$group_3'.
Found and cleaned up 2 empty switches in `\top.cpu.x.$group_2'.
Removing empty process `top.cpu.x.$group_2'.
Removing empty process `top.cpu.x.$group_1'.
Removing empty process `top.cpu.x.$group_0'.
Removing empty process `top.cpu.d.$group_5'.
Removing empty process `top.cpu.d.$group_4'.
Removing empty process `top.cpu.d.$group_3'.
Found and cleaned up 2 empty switches in `\top.cpu.d.$group_2'.
Removing empty process `top.cpu.d.$group_2'.
Removing empty process `top.cpu.d.$group_1'.
Removing empty process `top.cpu.d.$group_0'.
Removing empty process `top.cpu.f.$group_5'.
Removing empty process `top.cpu.f.$group_4'.
Removing empty process `top.cpu.f.$group_3'.
Found and cleaned up 2 empty switches in `\top.cpu.f.$group_2'.
Removing empty process `top.cpu.f.$group_2'.
Removing empty process `top.cpu.f.$group_1'.
Removing empty process `top.cpu.f.$group_0'.
Removing empty process `top.cpu.a.$group_3'.
Removing empty process `top.cpu.a.$group_2'.
Removing empty process `top.cpu.a.$group_1'.
Found and cleaned up 2 empty switches in `\top.cpu.a.$group_0'.
Removing empty process `top.cpu.a.$group_0'.
Cleaned up 572 empty switches.

2.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
Optimizing module top.pin_clk16_0.
Optimizing module top.pin_uart_0__tx.
Optimizing module top.pin_uart_0__rx.
Optimizing module top.cd_sync.
Optimizing module top.csr_dec.
<suppressed ~3 debug messages>
Optimizing module top.wb_csr.
<suppressed ~6 debug messages>
Optimizing module top.wb_dec.
<suppressed ~12 debug messages>
Optimizing module top.wb_arb.
<suppressed ~12 debug messages>
Optimizing module top.serial.
Optimizing module top.serial.phy.
Optimizing module top.serial.phy.tx.
<suppressed ~13 debug messages>
Optimizing module top.serial.phy.rx.
<suppressed ~16 debug messages>
Optimizing module top.serial.tx_fifo.
<suppressed ~1 debug messages>
Optimizing module top.serial.rx_fifo.
<suppressed ~1 debug messages>
Optimizing module top.serial.bridge.
Optimizing module top.serial.bridge.tx__data.
Optimizing module top.serial.bridge.tx__data.data.
Optimizing module top.serial.bridge.tx__info.
Optimizing module top.serial.bridge.tx__info.rdy.
Optimizing module top.serial.bridge.rx__data.
Optimizing module top.serial.bridge.rx__data.data.
Optimizing module top.serial.bridge.rx__info.
Optimizing module top.serial.bridge.rx__info.err__parity.
Optimizing module top.serial.bridge.rx__info.err__frame.
Optimizing module top.serial.bridge.rx__info.err__overflow.
Optimizing module top.serial.bridge.rx__info.rdy.
Optimizing module top.serial.bridge.ctrl.
Optimizing module top.serial.bridge.ctrl.divisor.
Optimizing module top.serial.bridge.mux.
<suppressed ~7 debug messages>
Optimizing module top.rom.
<suppressed ~2 debug messages>
Optimizing module top.cpu.
<suppressed ~92 debug messages>
Optimizing module top.cpu.csrf.
Optimizing module top.cpu.gprf.
Optimizing module top.cpu.gprf.mem.
Optimizing module top.cpu.loadstore.
<suppressed ~2 debug messages>
Optimizing module top.cpu.fetch.
<suppressed ~5 debug messages>
Optimizing module top.cpu.fetch.ibus_arbiter.
<suppressed ~22 debug messages>
Optimizing module top.cpu.fetch.ibus_arbiter.bus_pe.
<suppressed ~1 debug messages>
Optimizing module top.cpu.fetch.icache.
<suppressed ~15 debug messages>
Optimizing module top.cpu.fetch.icache.dat_mem_0.
Optimizing module top.cpu.fetch.icache.tag_mem_0.
Optimizing module top.cpu.fetch.icache.way_hit.
Optimizing module top.cpu.shifter.
<suppressed ~2 debug messages>
Optimizing module top.cpu.predict.
Optimizing module top.cpu.logic.
Optimizing module top.cpu.exception.
<suppressed ~6 debug messages>
Optimizing module top.cpu.exception.interrupt_pe.
<suppressed ~1 debug messages>
Optimizing module top.cpu.exception.trap_pe.
<suppressed ~1 debug messages>
Optimizing module top.cpu.decoder.
<suppressed ~105 debug messages>
Optimizing module top.cpu.compare.
<suppressed ~1 debug messages>
Optimizing module top.cpu.adder.
<suppressed ~1 debug messages>
Optimizing module top.cpu.data_sel.
<suppressed ~3 debug messages>
Optimizing module top.cpu.pc_sel.
Optimizing module top.cpu.w.
Optimizing module top.cpu.m.
<suppressed ~3 debug messages>
Optimizing module top.cpu.x.
<suppressed ~4 debug messages>
Optimizing module top.cpu.d.
<suppressed ~3 debug messages>
Optimizing module top.cpu.f.
<suppressed ~3 debug messages>
Optimizing module top.cpu.a.
<suppressed ~3 debug messages>

2.4. Executing FLATTEN pass (flatten design).
Deleting now unused module top.pin_clk16_0.
Deleting now unused module top.pin_uart_0__tx.
Deleting now unused module top.pin_uart_0__rx.
Deleting now unused module top.cd_sync.
Deleting now unused module top.csr_dec.
Deleting now unused module top.wb_csr.
Deleting now unused module top.wb_dec.
Deleting now unused module top.wb_arb.
Deleting now unused module top.serial.
Deleting now unused module top.serial.phy.
Deleting now unused module top.serial.phy.tx.
Deleting now unused module top.serial.phy.rx.
Deleting now unused module top.serial.tx_fifo.
Deleting now unused module top.serial.rx_fifo.
Deleting now unused module top.serial.bridge.
Deleting now unused module top.serial.bridge.tx__data.
Deleting now unused module top.serial.bridge.tx__data.data.
Deleting now unused module top.serial.bridge.tx__info.
Deleting now unused module top.serial.bridge.tx__info.rdy.
Deleting now unused module top.serial.bridge.rx__data.
Deleting now unused module top.serial.bridge.rx__data.data.
Deleting now unused module top.serial.bridge.rx__info.
Deleting now unused module top.serial.bridge.rx__info.err__parity.
Deleting now unused module top.serial.bridge.rx__info.err__frame.
Deleting now unused module top.serial.bridge.rx__info.err__overflow.
Deleting now unused module top.serial.bridge.rx__info.rdy.
Deleting now unused module top.serial.bridge.ctrl.
Deleting now unused module top.serial.bridge.ctrl.divisor.
Deleting now unused module top.serial.bridge.mux.
Deleting now unused module top.rom.
Deleting now unused module top.cpu.
Deleting now unused module top.cpu.csrf.
Deleting now unused module top.cpu.gprf.
Deleting now unused module top.cpu.gprf.mem.
Deleting now unused module top.cpu.loadstore.
Deleting now unused module top.cpu.fetch.
Deleting now unused module top.cpu.fetch.ibus_arbiter.
Deleting now unused module top.cpu.fetch.ibus_arbiter.bus_pe.
Deleting now unused module top.cpu.fetch.icache.
Deleting now unused module top.cpu.fetch.icache.dat_mem_0.
Deleting now unused module top.cpu.fetch.icache.tag_mem_0.
Deleting now unused module top.cpu.fetch.icache.way_hit.
Deleting now unused module top.cpu.shifter.
Deleting now unused module top.cpu.predict.
Deleting now unused module top.cpu.logic.
Deleting now unused module top.cpu.exception.
Deleting now unused module top.cpu.exception.interrupt_pe.
Deleting now unused module top.cpu.exception.trap_pe.
Deleting now unused module top.cpu.decoder.
Deleting now unused module top.cpu.compare.
Deleting now unused module top.cpu.adder.
Deleting now unused module top.cpu.data_sel.
Deleting now unused module top.cpu.pc_sel.
Deleting now unused module top.cpu.w.
Deleting now unused module top.cpu.m.
Deleting now unused module top.cpu.x.
Deleting now unused module top.cpu.d.
Deleting now unused module top.cpu.f.
Deleting now unused module top.cpu.a.
<suppressed ~59 debug messages>

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~342 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 2453 unused cells and 3836 unused wires.
<suppressed ~3132 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~78 debug messages>
Removed a total of 26 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $flatten\serial.\phy.\tx.$procmux$573: \serial.phy.tx.fsm_state -> 1'0
      Replacing known input bits on port B of cell $flatten\serial.\phy.\tx.$procmux$571: \serial.phy.tx.fsm_state -> 1'1
      Replacing known input bits on port A of cell $flatten\serial.\phy.\tx.$procmux$568: \serial.phy.tx.fsm_state -> 1'1
      Replacing known input bits on port A of cell $flatten\serial.\phy.\tx.$procmux$575: \serial.phy.tx.fsm_state -> 1'0
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.10.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $flatten\serial.\bridge.\mux.$39 ($dff) from module top.

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1010 unused wires.
<suppressed ~986 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~7 debug messages>

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\serial.\tx_fifo.$15.
    dead port 2/2 on $mux $flatten\serial.\tx_fifo.$15.
Removed 2 multiplexer ports.
<suppressed ~16 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.10.13. Executing OPT_DFF pass (perform DFF optimizations).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 5 unused cells and 22 unused wires.
<suppressed ~17 debug messages>

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.16. Rerunning OPT passes. (Maybe there is more to do..)

2.10.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

2.10.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.10.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.10.20. Executing OPT_DFF pass (perform DFF optimizations).

2.10.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.10.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.23. Finished OPT passes. (There is nothing left to do.)

2.11. Executing FSM pass (extract and optimize FSM).

2.11.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.serial.bridge.ctrl.divisor._storage as FSM state register:
    Register has an initialization value.
Not marking top.serial.bridge.mux.w_shadow__0__data as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
Not marking top.serial.tx_fifo.produce as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

2.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

2.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.12.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $flatten\serial.\tx_fifo.$76 ($dff) from module top (D = $flatten\serial.\tx_fifo.$procmux$708_Y, Q = \serial.tx_fifo.r_rdy, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$2811 ($sdff) from module top (D = $flatten\serial.\tx_fifo.$procmux$708_Y, Q = \serial.tx_fifo.r_rdy).
Adding SRST signal on $flatten\serial.\tx_fifo.$75 ($dff) from module top (D = $flatten\serial.\tx_fifo.$procmux$714_Y, Q = \serial.tx_fifo.inner_level, rval = 4'0000).
Adding EN signal on $auto$ff.cc:266:slice$2815 ($sdff) from module top (D = $flatten\serial.\tx_fifo.$62 [3:0], Q = \serial.tx_fifo.inner_level).
Adding SRST signal on $flatten\serial.\tx_fifo.$74 ($dff) from module top (D = $flatten\serial.\tx_fifo.$procmux$718_Y, Q = \serial.tx_fifo.consume, rval = 4'0000).
Adding EN signal on $auto$ff.cc:266:slice$2817 ($sdff) from module top (D = $flatten\serial.\tx_fifo.$28 [3:0], Q = \serial.tx_fifo.consume).
Adding EN signal on $flatten\serial.\tx_fifo.$73 ($dff) from module top (D = 4'0000, Q = \serial.tx_fifo.produce).
Adding SRST signal on $flatten\serial.\phy.\tx.$29 ($dff) from module top (D = $flatten\serial.\phy.\tx.$procmux$623_Y, Q = \serial.phy.tx.o, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$2820 ($sdff) from module top (D = \serial.phy.tx.shreg [0], Q = \serial.phy.tx.o).
Adding SRST signal on $flatten\serial.\phy.\tx.$28 ($dff) from module top (D = $flatten\serial.\phy.\tx.$procmux$573_Y, Q = \serial.phy.tx.fsm_state, rval = 1'0).
Adding SRST signal on $flatten\serial.\phy.\tx.$27 ($dff) from module top (D = $flatten\serial.\phy.\tx.$procmux$583_Y, Q = \serial.phy.tx.timer, rval = 4'1000).
Adding EN signal on $auto$ff.cc:266:slice$2827 ($sdff) from module top (D = $flatten\serial.\phy.\tx.$procmux$583_Y, Q = \serial.phy.tx.timer).
Adding SRST signal on $flatten\serial.\phy.\tx.$26 ($dff) from module top (D = $flatten\serial.\phy.\tx.$procmux$593_Y, Q = \serial.phy.tx.bitno, rval = 4'0000).
Adding EN signal on $auto$ff.cc:266:slice$2835 ($sdff) from module top (D = $flatten\serial.\phy.\tx.$procmux$593_Y, Q = \serial.phy.tx.bitno).
Adding SRST signal on $flatten\serial.\phy.\tx.$25 ($dff) from module top (D = { $flatten\serial.\phy.\tx.$procmux$603_Y $flatten\serial.\phy.\tx.$procmux$613_Y $flatten\serial.\phy.\tx.$procmux$630_Y }, Q = \serial.phy.tx.shreg, rval = 10'0000000000).
Adding EN signal on $auto$ff.cc:266:slice$2845 ($sdff) from module top (D = { $flatten\serial.\phy.\tx.$procmux$603_Y $flatten\serial.\phy.\tx.$procmux$613_Y $flatten\serial.\phy.\tx.$procmux$630_Y }, Q = \serial.phy.tx.shreg).
Adding EN signal on $flatten\serial.\bridge.\mux.$41 ($dff) from module top (D = 8'00000000, Q = \serial.bridge.mux.w_shadow__0__data).
Adding EN signal on $flatten\serial.\bridge.\ctrl.\divisor.$1 ($dff) from module top (D = 4'1000, Q = \serial.bridge.ctrl.divisor._storage).
Adding EN signal on $flatten\cd_sync.$11 ($dff) from module top (D = $flatten\cd_sync.$5 [7:0], Q = \cd_sync.timer).
Adding EN signal on $flatten\cd_sync.$10 ($dff) from module top (D = 1'1, Q = \cd_sync.ready).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$2856 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$2856 ($dffe) from module top.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$2856 ($dffe) from module top.
Setting constant 1-bit at position 3 on $auto$ff.cc:266:slice$2856 ($dffe) from module top.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$2855 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$2855 ($dffe) from module top.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$2855 ($dffe) from module top.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$2855 ($dffe) from module top.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$2855 ($dffe) from module top.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$2855 ($dffe) from module top.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$2855 ($dffe) from module top.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$2855 ($dffe) from module top.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$2819 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$2819 ($dffe) from module top.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$2819 ($dffe) from module top.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$2819 ($dffe) from module top.

2.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 19 unused cells and 17 unused wires.
<suppressed ~33 debug messages>

2.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~8 debug messages>

2.12.9. Rerunning OPT passes. (Maybe there is more to do..)

2.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

2.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2854: { $auto$opt_dff.cc:194:make_patterns_logic$2849 $auto$opt_dff.cc:194:make_patterns_logic$2851 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2844: { $auto$opt_dff.cc:194:make_patterns_logic$2841 $auto$opt_dff.cc:194:make_patterns_logic$2839 }
  Optimizing cells in module \top.
Performed a total of 2 changes.

2.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

2.12.13. Executing OPT_DFF pass (perform DFF optimizations).

2.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

2.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.12.16. Rerunning OPT passes. (Maybe there is more to do..)

2.12.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

2.12.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.12.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.12.20. Executing OPT_DFF pass (perform DFF optimizations).

2.12.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.12.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.12.23. Finished OPT passes. (There is nothing left to do.)

2.13. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$2832 ($ne).
Removed top 1 bits (of 2) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$2814 ($ne).
Removed top 1 bits (of 5) from port Y of cell top.$flatten\serial.\phy.\tx.$17 ($sub).
Removed top 1 bits (of 5) from port Y of cell top.$flatten\serial.\phy.\tx.$9 ($sub).
Removed top 1 bits (of 5) from mux cell top.$flatten\serial.\tx_fifo.$34 ($mux).
Removed top 1 bits (of 5) from port Y of cell top.$flatten\serial.\tx_fifo.$64 ($sub).
Removed top 1 bits (of 9) from port Y of cell top.$flatten\cd_sync.$7 ($add).
Removed top 1 bits (of 5) from port Y of cell top.$flatten\serial.\tx_fifo.$30 ($add).
Removed top 1 bits (of 9) from wire top.$flatten\cd_sync.$5.
Removed top 1 bits (of 5) from wire top.$flatten\serial.\phy.\tx.$15.
Removed top 1 bits (of 5) from wire top.$flatten\serial.\tx_fifo.$28.
Removed top 1 bits (of 5) from wire top.$flatten\serial.\tx_fifo.$29.

2.14. Executing PEEPOPT pass (run peephole optimizers).

2.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.16. Executing SHARE pass (SAT-based resource sharing).

2.17. Executing TECHMAP pass (map to technology primitives).

2.17.1. Executing Verilog-2005 frontend: /share/cmp2lut.v
Parsing Verilog input from `/share/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.17.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

2.18. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.20. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $flatten\cd_sync.$7 ($add).
  creating $macc model for $flatten\serial.\phy.\tx.$17 ($sub).
  creating $macc model for $flatten\serial.\phy.\tx.$9 ($sub).
  creating $macc model for $flatten\serial.\tx_fifo.$30 ($add).
  creating $macc model for $flatten\serial.\tx_fifo.$64 ($sub).
  creating $alu model for $macc $flatten\serial.\tx_fifo.$64.
  creating $alu model for $macc $flatten\serial.\tx_fifo.$30.
  creating $alu model for $macc $flatten\serial.\phy.\tx.$9.
  creating $alu model for $macc $flatten\serial.\phy.\tx.$17.
  creating $alu model for $macc $flatten\cd_sync.$7.
  creating $alu cell for $flatten\cd_sync.$7: $auto$alumacc.cc:485:replace_alu$2864
  creating $alu cell for $flatten\serial.\phy.\tx.$17: $auto$alumacc.cc:485:replace_alu$2867
  creating $alu cell for $flatten\serial.\phy.\tx.$9: $auto$alumacc.cc:485:replace_alu$2870
  creating $alu cell for $flatten\serial.\tx_fifo.$30: $auto$alumacc.cc:485:replace_alu$2873
  creating $alu cell for $flatten\serial.\tx_fifo.$64: $auto$alumacc.cc:485:replace_alu$2876
  created 5 $alu and 0 $macc cells.

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

2.21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.21.6. Executing OPT_DFF pass (perform DFF optimizations).

2.21.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.21.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.21.9. Finished OPT passes. (There is nothing left to do.)

2.22. Executing MEMORY pass.

2.22.1. Executing OPT_MEM pass (optimize memories).
top.serial.tx_fifo.storage$3: removing const-0 lane 0
top.serial.tx_fifo.storage$3: removing const-0 lane 1
top.serial.tx_fifo.storage$3: removing const-0 lane 2
top.serial.tx_fifo.storage$3: removing const-0 lane 3
top.serial.tx_fifo.storage$3: removing const-0 lane 4
top.serial.tx_fifo.storage$3: removing const-0 lane 5
top.serial.tx_fifo.storage$3: removing const-0 lane 6
top.serial.tx_fifo.storage$3: removing const-0 lane 7
Performed a total of 2 transformations.

2.22.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.22.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.22.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.22.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.22.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 4 unused cells and 7 unused wires.
<suppressed ~7 debug messages>

2.22.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.22.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.24. Executing MEMORY_LIBMAP pass (mapping memories to cells).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /share/ice40/brams_map.v
Parsing Verilog input from `/share/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K_'.
Successfully finished Verilog frontend.

2.25.2. Executing Verilog-2005 frontend: /share/ice40/spram_map.v
Parsing Verilog input from `/share/ice40/spram_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_SPRAM_'.
Successfully finished Verilog frontend.

2.25.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~65 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

2.27.3. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$opt_mem.cc:125:execute$2879 ($dffe) from module top.

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 12 unused wires.
<suppressed ~1 debug messages>

2.27.5. Rerunning OPT passes. (Removed registers in this run.)

2.27.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

2.27.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.27.8. Executing OPT_DFF pass (perform DFF optimizations).

2.27.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.27.10. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.6. Executing OPT_DFF pass (perform DFF optimizations).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.9. Finished OPT passes. (There is nothing left to do.)

2.30. Executing ICE40_WRAPCARRY pass (wrap carries).

2.31. Executing TECHMAP pass (map to technology primitives).

2.31.1. Executing Verilog-2005 frontend: /share/techmap.v
Parsing Verilog input from `/share/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.31.2. Executing Verilog-2005 frontend: /share/ice40/arith_map.v
Parsing Verilog input from `/share/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.31.3. Continuing TECHMAP pass.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$8742280fdebca84e1c87f2a86ed84f62d558f4cc\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $reduce_or.
No more expansions possible.
<suppressed ~185 debug messages>

2.32. Executing OPT pass (performing simple optimizations).

2.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~80 debug messages>

2.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

2.32.3. Executing OPT_DFF pass (perform DFF optimizations).

2.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 15 unused cells and 107 unused wires.
<suppressed ~16 debug messages>

2.32.5. Finished fast OPT passes.

2.33. Executing ICE40_OPT pass (performing simple optimizations).

2.33.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2864.slice[0].carry: CO=\cd_sync.timer [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2867.slice[0].carry: CO=\serial.phy.tx.timer [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2870.slice[0].carry: CO=\serial.phy.tx.bitno [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2876.slice[0].carry: CO=\serial.tx_fifo.inner_level [0]

2.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.33.4. Executing OPT_DFF pass (perform DFF optimizations).

2.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.33.6. Rerunning OPT passes. (Removed registers in this run.)

2.33.7. Running ICE40 specific optimizations.

2.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.33.10. Executing OPT_DFF pass (perform DFF optimizations).

2.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.33.12. Finished OPT passes. (There is nothing left to do.)

2.34. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

2.35. Executing TECHMAP pass (map to technology primitives).

2.35.1. Executing Verilog-2005 frontend: /share/ice40/ff_map.v
Parsing Verilog input from `/share/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.35.2. Continuing TECHMAP pass.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
No more expansions possible.
<suppressed ~56 debug messages>

2.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$alumacc.cc:485:replace_alu$2864.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2867.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2870.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2876.slice[0].carry ($lut).

2.38. Executing ICE40_OPT pass (performing simple optimizations).

2.38.1. Running ICE40 specific optimizations.

2.38.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~67 debug messages>

2.38.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~138 debug messages>
Removed a total of 46 cells.

2.38.4. Executing OPT_DFF pass (perform DFF optimizations).

2.38.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 253 unused wires.
<suppressed ~1 debug messages>

2.38.6. Rerunning OPT passes. (Removed registers in this run.)

2.38.7. Running ICE40 specific optimizations.

2.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.38.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.38.10. Executing OPT_DFF pass (perform DFF optimizations).

2.38.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.38.12. Finished OPT passes. (There is nothing left to do.)

2.39. Executing TECHMAP pass (map to technology primitives).

2.39.1. Executing Verilog-2005 frontend: /share/ice40/latches_map.v
Parsing Verilog input from `/share/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.39.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

2.40. Executing Verilog-2005 frontend: /share/ice40/abc9_model.v
Parsing Verilog input from `/share/ice40/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ICE40_CARRY_WRAPPER'.
Successfully finished Verilog frontend.

2.41. Executing ABC9 pass.

2.41.1. Executing ABC9_OPS pass (helper functions for ABC9).

2.41.2. Executing ABC9_OPS pass (helper functions for ABC9).

2.41.3. Executing SCC pass (detecting logic loops).
Found 0 SCCs in module top.
Found 0 SCCs.

2.41.4. Executing ABC9_OPS pass (helper functions for ABC9).

2.41.5. Executing PROC pass (convert processes to netlists).

2.41.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.41.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.41.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.41.5.4. Executing PROC_INIT pass (extract init attributes).

2.41.5.5. Executing PROC_ARST pass (detect async resets in processes).

2.41.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.41.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.41.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.41.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.41.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.41.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.41.5.12. Executing OPT_EXPR pass (perform const folding).

2.41.6. Executing TECHMAP pass (map to technology primitives).

2.41.6.1. Executing Verilog-2005 frontend: /share/techmap.v
Parsing Verilog input from `/share/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.41.6.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~126 debug messages>

2.41.7. Executing OPT pass (performing simple optimizations).

2.41.7.1. Executing OPT_EXPR pass (perform const folding).

2.41.7.2. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

2.41.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Removed 0 multiplexer ports.

2.41.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Performed a total of 0 changes.

2.41.7.5. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

2.41.7.6. Executing OPT_DFF pass (perform DFF optimizations).

2.41.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).

2.41.7.8. Executing OPT_EXPR pass (perform const folding).

2.41.7.9. Finished OPT passes. (There is nothing left to do.)

2.41.8. Executing TECHMAP pass (map to technology primitives).

2.41.8.1. Executing Verilog-2005 frontend: /share/abc9_map.v
Parsing Verilog input from `/share/abc9_map.v' to AST representation.
Successfully finished Verilog frontend.

2.41.8.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~2 debug messages>

2.41.9. Executing Verilog-2005 frontend: /share/abc9_model.v
Parsing Verilog input from `/share/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ABC9_DELAY'.
Generating RTLIL representation for module `$__ABC9_SCC_BREAKER'.
Generating RTLIL representation for module `$__DFF_N__$abc9_flop'.
Generating RTLIL representation for module `$__DFF_P__$abc9_flop'.
Successfully finished Verilog frontend.

2.41.10. Executing ABC9_OPS pass (helper functions for ABC9).
<suppressed ~61 debug messages>

2.41.11. Executing ABC9_OPS pass (helper functions for ABC9).

2.41.12. Executing ABC9_OPS pass (helper functions for ABC9).
<suppressed ~2 debug messages>

2.41.13. Executing TECHMAP pass (map to technology primitives).

2.41.13.1. Executing Verilog-2005 frontend: /share/techmap.v
Parsing Verilog input from `/share/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.41.13.2. Continuing TECHMAP pass.
Using template $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 for cells of type $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1.
Using template $paramod\SB_LUT4\LUT_INIT=16'0110100110010110 for cells of type SB_LUT4.
Using template SB_CARRY for cells of type SB_CARRY.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~147 debug messages>

2.41.14. Executing OPT pass (performing simple optimizations).

2.41.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~4 debug messages>

2.41.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~29 debug messages>
Removed a total of 12 cells.

2.41.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.41.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.41.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.41.14.6. Executing OPT_DFF pass (perform DFF optimizations).

2.41.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

2.41.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.41.14.9. Rerunning OPT passes. (Maybe there is more to do..)

2.41.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.41.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.41.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.41.14.13. Executing OPT_DFF pass (perform DFF optimizations).

2.41.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.41.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.41.14.16. Finished OPT passes. (There is nothing left to do.)

2.41.15. Executing AIGMAP pass (map logic to AIG).
Module top: replaced 7 cells with 43 new cells, skipped 11 cells.
  replaced 2 cell types:
       2 $_OR_
       5 $_MUX_
  not replaced 3 cell types:
       8 $specify2
       1 $_NOT_
       2 $_AND_

2.41.16. Executing AIGMAP pass (map logic to AIG).
Module top: replaced 35 cells with 159 new cells, skipped 147 cells.
  replaced 3 cell types:
      22 $_OR_
       5 $_ORNOT_
       8 $_MUX_
  not replaced 9 cell types:
      17 $_NOT_
      18 $_AND_
       3 SB_IO
       9 SB_DFFE
       1 SB_DFFSR
      24 SB_DFFESR
      16 $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1
      25 $paramod$__ABC9_DELAY\DELAY=32'00000000000000000000000011001011
      34 $paramod$__ABC9_DELAY\DELAY=32'00000000000000000000000000010101

2.41.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

2.41.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

2.41.16.3. Executing XAIGER backend.
<suppressed ~45 debug messages>
Extracted 69 AND gates and 340 wires from module `top' to a netlist network with 38 inputs and 71 outputs.

2.41.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

2.41.16.5. Executing ABC9.
Running ABC command: "/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     38/     71  and =      61  lev =    6 (0.34)  mem = 0.01 MB  box = 75  bb = 59
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     38/     71  and =      60  lev =    5 (0.26)  mem = 0.01 MB  ch =    5  box = 75  bb = 59
ABC: + &if -W 250 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  104. Set =  480. CutMin = no
ABC: Node =      60.  Ch =     5.  Total mem =    0.04 MB. Peak cut mem =    0.00 MB.
ABC: P:  Del = 2301.00.  Ar =      34.0.  Edge =       90.  Cut =      168.  T =     0.00 sec
ABC: P:  Del = 2301.00.  Ar =      34.0.  Edge =       90.  Cut =      167.  T =     0.00 sec
ABC: P:  Del = 2301.00.  Ar =      34.0.  Edge =       91.  Cut =      169.  T =     0.00 sec
ABC: F:  Del = 1889.00.  Ar =      32.0.  Edge =       87.  Cut =      123.  T =     0.00 sec
ABC: A:  Del = 1889.00.  Ar =      30.0.  Edge =       82.  Cut =      117.  T =     0.00 sec
ABC: A:  Del = 1889.00.  Ar =      30.0.  Edge =       82.  Cut =      117.  T =     0.00 sec
ABC: Total time =     0.00 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: The network is not changed by "&mfs".
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =     38/     71  and =      55  lev =    5 (0.26)  mem = 0.01 MB  box = 75  bb = 59
ABC: Mapping (K=4)  :  lut =     30  edge =      82  lev =    2 (0.17)  levB =    8  mem = 0.00 MB
ABC: LUT = 30 : 2=17 56.7 %  3=4 13.3 %  4=9 30.0 %  Ave = 2.73
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.01 seconds, total: 0.01 seconds

2.41.16.6. Executing AIGER frontend.
<suppressed ~230 debug messages>
Removed 55 unused cells and 394 unused wires.

2.41.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:              $lut cells:       37
ABC RESULTS:   $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 cells:       16
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:       71
Removing temp directory.

2.41.17. Executing TECHMAP pass (map to technology primitives).

2.41.17.1. Executing Verilog-2005 frontend: /share/abc9_unmap.v
Parsing Verilog input from `/share/abc9_unmap.v' to AST representation.
Generating RTLIL representation for module `\$__DFF_x__$abc9_flop'.
Generating RTLIL representation for module `\$__ABC9_SCC_BREAKER'.
Successfully finished Verilog frontend.

2.41.17.2. Continuing TECHMAP pass.
Using template $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 for cells of type $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1.
No more expansions possible.
<suppressed ~22 debug messages>

2.42. Executing ICE40_WRAPCARRY pass (wrap carries).

2.43. Executing TECHMAP pass (map to technology primitives).

2.43.1. Executing Verilog-2005 frontend: /share/ice40/ff_map.v
Parsing Verilog input from `/share/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.43.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 15 unused cells and 508 unused wires.

2.44. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       54
  1-LUT                7
  2-LUT               22
  3-LUT               16
  4-LUT                9
  with \SB_CARRY    (#0)   12
  with \SB_CARRY    (#1)   12

Eliminating LUTs.
Number of LUTs:       54
  1-LUT                7
  2-LUT               22
  3-LUT               16
  4-LUT                9
  with \SB_CARRY    (#0)   12
  with \SB_CARRY    (#1)   12

Combining LUTs.
Number of LUTs:       47
  1-LUT                6
  2-LUT               15
  3-LUT               12
  4-LUT               14
  with \SB_CARRY    (#0)   12
  with \SB_CARRY    (#1)   12

Eliminated 0 LUTs.
Combined 7 LUTs.
<suppressed ~244 debug messages>

2.45. Executing TECHMAP pass (map to technology primitives).

2.45.1. Executing Verilog-2005 frontend: /share/ice40/cells_map.v
Parsing Verilog input from `/share/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.45.2. Continuing TECHMAP pass.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10110011 for cells of type $lut.
Using template $paramod$3ccd4e460eeb40194aa88ef0e5239278bde42035\$lut for cells of type $lut.
Using template $paramod$ba59a6d7bdd6d02f4b42514d6555f56c3dbd5a43\$lut for cells of type $lut.
Using template $paramod$8f303bc32ecb1b5f2f8235cccaffc8ff1c6bed57\$lut for cells of type $lut.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0111 for cells of type $lut.
Using template $paramod$4b616f0c1e43283b118a1021f852d89f0906cbf8\$lut for cells of type $lut.
Using template $paramod$0de052767abdccc3aefc818722bdc3c7850d25d6\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod$92e85407afe4deea7d21f8df970bd67adaa57e19\$lut for cells of type $lut.
Using template $paramod$9850450c7f2ce6ec6d61697515f47872a7c4eee5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000111 for cells of type $lut.
No more expansions possible.
<suppressed ~271 debug messages>
Removed 0 unused cells and 102 unused wires.

2.46. Executing AUTONAME pass.
Renamed 387 objects in module top (13 iterations).
<suppressed ~152 debug messages>

2.47. Executing HIERARCHY pass (managing design hierarchy).

2.47.1. Analyzing design hierarchy..
Top module:  \top

2.47.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.48. Printing statistics.

=== top ===

   Number of wires:                391
   Number of wire bits:           1759
   Number of public wires:         391
   Number of public wire bits:    1759
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 96
     SB_CARRY                       12
     SB_DFFE                         9
     SB_DFFESR                      24
     SB_DFFSR                        1
     SB_IO                           3
     SB_LUT4                        47

2.49. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

3. Executing JSON backend.

End of script. Logfile hash: 8516155820, CPU: user 6.60s system 0.00s
Yosys 0.36+8 (git sha1 fb4cbfa73, ccache clang 14.0.0-1ubuntu1.1 -Os -flto -flto)
Time spent: 53% 19x read_verilog (3 sec), 10% 1x flatten (0 sec), ...
